
Thermostat_TWI_SPI_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001700  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001700  00001774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ab2  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b4b  00000000  00000000  00003422  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e0a  00000000  00000000  00003f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a4  00000000  00000000  00004d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ed  00000000  00000000  0000511c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010fa  00000000  00000000  00005709  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00006803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d0 c0       	rjmp	.+416    	; 0x1a2 <__ctors_end>
       2:	e2 c0       	rjmp	.+452    	; 0x1c8 <__bad_interrupt>
       4:	e1 c0       	rjmp	.+450    	; 0x1c8 <__bad_interrupt>
       6:	e0 c0       	rjmp	.+448    	; 0x1c8 <__bad_interrupt>
       8:	df c0       	rjmp	.+446    	; 0x1c8 <__bad_interrupt>
       a:	de c0       	rjmp	.+444    	; 0x1c8 <__bad_interrupt>
       c:	dd c0       	rjmp	.+442    	; 0x1c8 <__bad_interrupt>
       e:	dc c0       	rjmp	.+440    	; 0x1c8 <__bad_interrupt>
      10:	db c0       	rjmp	.+438    	; 0x1c8 <__bad_interrupt>
      12:	da c0       	rjmp	.+436    	; 0x1c8 <__bad_interrupt>
      14:	d9 c0       	rjmp	.+434    	; 0x1c8 <__bad_interrupt>
      16:	d8 c0       	rjmp	.+432    	; 0x1c8 <__bad_interrupt>
      18:	d7 c0       	rjmp	.+430    	; 0x1c8 <__bad_interrupt>
      1a:	d6 c0       	rjmp	.+428    	; 0x1c8 <__bad_interrupt>
      1c:	d5 c0       	rjmp	.+426    	; 0x1c8 <__bad_interrupt>
      1e:	d4 c0       	rjmp	.+424    	; 0x1c8 <__bad_interrupt>
      20:	d3 c0       	rjmp	.+422    	; 0x1c8 <__bad_interrupt>
      22:	d2 c0       	rjmp	.+420    	; 0x1c8 <__bad_interrupt>
      24:	d1 c0       	rjmp	.+418    	; 0x1c8 <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	std	Y+40, r29	; 0x28
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	std	Y+56, r1	; 0x38
      34:	ba ab       	std	Y+50, r27	; 0x32
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	std	Y+51, r10	; 0x33
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	std	Y+54, r27	; 0x36
      68:	aa aa       	std	Y+50, r10	; 0x32
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	ldd	r30, Z+49	; 0x31
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <ftoa+0xac>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__trampolines_end>:
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	7a 10       	cpse	r7, r10
      ac:	f3 5a       	subi	r31, 0xA3	; 163
      ae:	00 a0       	ldd	r0, Z+32	; 0x20
      b0:	72 4e       	sbci	r23, 0xE2	; 226
      b2:	18 09       	sbc	r17, r8
      b4:	00 10       	cpse	r0, r0
      b6:	a5 d4       	rcall	.+2378   	; 0xa02 <T_H_maintain+0x90>
      b8:	e8 00       	.word	0x00e8	; ????
      ba:	00 e8       	ldi	r16, 0x80	; 128
      bc:	76 48       	sbci	r23, 0x86	; 134
      be:	17 00       	.word	0x0017	; ????
      c0:	00 e4       	ldi	r16, 0x40	; 64
      c2:	0b 54       	subi	r16, 0x4B	; 75
      c4:	02 00       	.word	0x0002	; ????
      c6:	00 ca       	rjmp	.-3072   	; 0xfffff4c8 <__eeprom_end+0xff7ef4c8>
      c8:	9a 3b       	cpi	r25, 0xBA	; 186
      ca:	00 00       	nop
      cc:	00 e1       	ldi	r16, 0x10	; 16
      ce:	f5 05       	cpc	r31, r5
      d0:	00 00       	nop
      d2:	80 96       	adiw	r24, 0x20	; 32
      d4:	98 00       	.word	0x0098	; ????
      d6:	00 00       	nop
      d8:	40 42       	sbci	r20, 0x20	; 32
      da:	0f 00       	.word	0x000f	; ????
      dc:	00 00       	nop
      de:	a0 86       	std	Z+8, r10	; 0x08
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	10 27       	eor	r17, r16
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	e8 03       	fmulsu	r22, r16
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	64 00       	.word	0x0064	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	0a 00       	.word	0x000a	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	01 00       	.word	0x0001	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	2c 76       	andi	r18, 0x6C	; 108
     104:	d8 88       	ldd	r13, Y+16	; 0x10
     106:	dc 67       	ori	r29, 0x7C	; 124
     108:	4f 08       	sbc	r4, r15
     10a:	23 df       	rcall	.-442    	; 0xffffff52 <__eeprom_end+0xff7eff52>
     10c:	c1 df       	rcall	.-126    	; 0x90 <__SREG__+0x51>
     10e:	ae 59       	subi	r26, 0x9E	; 158
     110:	e1 b1       	in	r30, 0x01	; 1
     112:	b7 96       	adiw	r30, 0x27	; 39
     114:	e5 e3       	ldi	r30, 0x35	; 53
     116:	e4 53       	subi	r30, 0x34	; 52
     118:	c6 3a       	cpi	r28, 0xA6	; 166
     11a:	e6 51       	subi	r30, 0x16	; 22
     11c:	99 76       	andi	r25, 0x69	; 105
     11e:	96 e8       	ldi	r25, 0x86	; 134
     120:	e6 c2       	rjmp	.+1484   	; 0x6ee <main+0x156>
     122:	84 26       	eor	r8, r20
     124:	eb 89       	ldd	r30, Y+19	; 0x13
     126:	8c 9b       	sbis	0x11, 4	; 17
     128:	62 ed       	ldi	r22, 0xD2	; 210
     12a:	40 7c       	andi	r20, 0xC0	; 192
     12c:	6f fc       	.word	0xfc6f	; ????
     12e:	ef bc       	out	0x2f, r14	; 47
     130:	9c 9f       	mul	r25, r28
     132:	40 f2       	brcs	.-112    	; 0xc4 <__trampolines_end+0x1c>
     134:	ba a5       	ldd	r27, Y+42	; 0x2a
     136:	6f a5       	ldd	r22, Y+47	; 0x2f
     138:	f4 90       	lpm	r15, Z
     13a:	05 5a       	subi	r16, 0xA5	; 165
     13c:	2a f7       	brpl	.-54     	; 0x108 <__trampolines_end+0x60>
     13e:	5c 93       	st	X, r21
     140:	6b 6c       	ori	r22, 0xCB	; 203
     142:	f9 67       	ori	r31, 0x79	; 121
     144:	6d c1       	rjmp	.+730    	; 0x420 <LCD_data+0x1a>
     146:	1b fc       	.word	0xfc1b	; ????
     148:	e0 e4       	ldi	r30, 0x40	; 64
     14a:	0d 47       	sbci	r16, 0x7D	; 125
     14c:	fe f5       	brtc	.+126    	; 0x1cc <EEPROM_write+0x2>
     14e:	20 e6       	ldi	r18, 0x60	; 96
     150:	b5 00       	.word	0x00b5	; ????
     152:	d0 ed       	ldi	r29, 0xD0	; 208
     154:	90 2e       	mov	r9, r16
     156:	03 00       	.word	0x0003	; ????
     158:	94 35       	cpi	r25, 0x54	; 84
     15a:	77 05       	cpc	r23, r7
     15c:	00 80       	ld	r0, Z
     15e:	84 1e       	adc	r8, r20
     160:	08 00       	.word	0x0008	; ????
     162:	00 20       	and	r0, r0
     164:	4e 0a       	sbc	r4, r30
     166:	00 00       	nop
     168:	00 c8       	rjmp	.-4096   	; 0xfffff16a <__eeprom_end+0xff7ef16a>
     16a:	0c 33       	cpi	r16, 0x3C	; 60
     16c:	33 33       	cpi	r19, 0x33	; 51
     16e:	33 0f       	add	r19, r19
     170:	98 6e       	ori	r25, 0xE8	; 232
     172:	12 83       	std	Z+2, r17	; 0x02
     174:	11 41       	sbci	r17, 0x11	; 17
     176:	ef 8d       	ldd	r30, Y+31	; 0x1f
     178:	21 14       	cp	r2, r1
     17a:	89 3b       	cpi	r24, 0xB9	; 185
     17c:	e6 55       	subi	r30, 0x56	; 86
     17e:	16 cf       	rjmp	.-468    	; 0xffffffac <__eeprom_end+0xff7effac>
     180:	fe e6       	ldi	r31, 0x6E	; 110
     182:	db 18       	sub	r13, r11
     184:	d1 84       	ldd	r13, Z+9	; 0x09
     186:	4b 38       	cpi	r20, 0x8B	; 139
     188:	1b f7       	brvc	.-58     	; 0x150 <__trampolines_end+0xa8>
     18a:	7c 1d       	adc	r23, r12
     18c:	90 1d       	adc	r25, r0
     18e:	a4 bb       	out	0x14, r26	; 20
     190:	e4 24       	eor	r14, r4
     192:	20 32       	cpi	r18, 0x20	; 32
     194:	84 72       	andi	r24, 0x24	; 36
     196:	5e 22       	and	r5, r30
     198:	81 00       	.word	0x0081	; ????
     19a:	c9 f1       	breq	.+114    	; 0x20e <I2C_stop_condition+0x2>
     19c:	24 ec       	ldi	r18, 0xC4	; 196
     19e:	a1 e5       	ldi	r26, 0x51	; 81
     1a0:	3d 27       	eor	r19, r29

000001a2 <__ctors_end>:
     1a2:	11 24       	eor	r1, r1
     1a4:	1f be       	out	0x3f, r1	; 63
     1a6:	cf e5       	ldi	r28, 0x5F	; 95
     1a8:	d4 e0       	ldi	r29, 0x04	; 4
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	cd bf       	out	0x3d, r28	; 61

000001ae <__do_copy_data>:
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	a0 e6       	ldi	r26, 0x60	; 96
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	e0 e0       	ldi	r30, 0x00	; 0
     1b6:	f7 e1       	ldi	r31, 0x17	; 23
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x10>
     1ba:	05 90       	lpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	a0 37       	cpi	r26, 0x70	; 112
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0xc>
     1c4:	e9 d1       	rcall	.+978    	; 0x598 <main>
     1c6:	9a ca       	rjmp	.-2764   	; 0xfffff6fc <__eeprom_end+0xff7ef6fc>

000001c8 <__bad_interrupt>:
     1c8:	1b cf       	rjmp	.-458    	; 0x0 <__vectors>

000001ca <EEPROM_write>:

#include "EEPROM.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)  //Writing data to EEPROM.
{
	while(EECR & (1<<EEWE))         //Wait for completion of previous write
     1ca:	e1 99       	sbic	0x1c, 1	; 28
     1cc:	fe cf       	rjmp	.-4      	; 0x1ca <EEPROM_write>
	;
	EEAR = uiAddress;               //Set up address
     1ce:	9f bb       	out	0x1f, r25	; 31
     1d0:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;                  //and data registers.
     1d2:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE);             //Write logical one to EEMWE.
     1d4:	8c b3       	in	r24, 0x1c	; 28
     1d6:	84 60       	ori	r24, 0x04	; 4
     1d8:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE);              //Start EEPROM write by setting EEWE.
     1da:	8c b3       	in	r24, 0x1c	; 28
     1dc:	82 60       	ori	r24, 0x02	; 2
     1de:	8c bb       	out	0x1c, r24	; 28
     1e0:	08 95       	ret

000001e2 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)             //Reading data to EEPROM.
{
	while(EECR & (1<<EEWE))          //Wait for completion of previous write.
     1e2:	e1 99       	sbic	0x1c, 1	; 28
     1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <EEPROM_read>
	;
	EEAR = uiAddress;                //Set up address register.
     1e6:	9f bb       	out	0x1f, r25	; 31
     1e8:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);               //Start EEPROM read by writing EERE.
     1ea:	8c b3       	in	r24, 0x1c	; 28
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	8c bb       	out	0x1c, r24	; 28
	return EEDR;                     //Return data from data register.
     1f0:	8d b3       	in	r24, 0x1d	; 29
     1f2:	08 95       	ret

000001f4 <I2C_settings>:

#include "I2C.h"

void I2C_settings(void)
{
	TWBR = 2;                                       //TWI Bit Rate Register - Clock line frequency = 50. Fcpu = 1MHz;
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~((1<<TWPS1) | (1<<TWPS0)); 	        //No frequency divider;
     1f8:	81 b1       	in	r24, 0x01	; 1
     1fa:	8c 7f       	andi	r24, 0xFC	; 252
     1fc:	81 b9       	out	0x01, r24	; 1
     1fe:	08 95       	ret

00000200 <I2C_start_condition>:
}

void I2C_start_condition(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);     //TWINT: TWI Interrupt Flag. TWSTA: TWI START Condition Bit. TWEN: TWI Enable Bit;
     200:	84 ea       	ldi	r24, 0xA4	; 164
     202:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR&(1<<TWINT)))                      //TWINT bit is set by hardware when the TWI has finished its current job and expects application software response;
     204:	06 b6       	in	r0, 0x36	; 54
     206:	07 fe       	sbrs	r0, 7
     208:	fd cf       	rjmp	.-6      	; 0x204 <I2C_start_condition+0x4>
	;
}
     20a:	08 95       	ret

0000020c <I2C_stop_condition>:

void I2C_stop_condition(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);     //TWINT: TWI Interrupt Flag. TWSTO: TWI STOP Condition Bit. TWEN: TWI Enable Bit;
     20c:	84 e9       	ldi	r24, 0x94	; 148
     20e:	86 bf       	out	0x36, r24	; 54
     210:	08 95       	ret

00000212 <I2C_write_command>:
}

void I2C_write_command(unsigned char command)       //Set command TWI;   
{
	TWDR = command;                                 //TWDR - TWI Data Register;
     212:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);                  //TWINT: TWI Interrupt Flag. TWEN: TWI Enable Bit;
     214:	84 e8       	ldi	r24, 0x84	; 132
     216:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)))                       //TWINT bit is set by hardware when the TWI has finished its current job and expects application software response;
     218:	06 b6       	in	r0, 0x36	; 54
     21a:	07 fe       	sbrs	r0, 7
     21c:	fd cf       	rjmp	.-6      	; 0x218 <I2C_write_command+0x6>
	;
}
     21e:	08 95       	ret

00000220 <I2C_get_byte_data>:

unsigned char I2C_get_byte_data(void)               //Function returns one byte data from the sensor;
{
	TWCR = (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
     220:	84 ec       	ldi	r24, 0xC4	; 196
     222:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR&(1<<TWINT)))
     224:	06 b6       	in	r0, 0x36	; 54
     226:	07 fe       	sbrs	r0, 7
     228:	fd cf       	rjmp	.-6      	; 0x224 <I2C_get_byte_data+0x4>
	;
	
	return TWDR;
     22a:	83 b1       	in	r24, 0x03	; 3
}
     22c:	08 95       	ret

0000022e <I2C_NACK_checksum>:

void I2C_NACK_checksum(void)                        //Checksum transmission;  
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     22e:	84 e8       	ldi	r24, 0x84	; 132
     230:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR&(1<<TWINT)))
     232:	06 b6       	in	r0, 0x36	; 54
     234:	07 fe       	sbrs	r0, 7
     236:	fd cf       	rjmp	.-6      	; 0x232 <I2C_NACK_checksum+0x4>
	;
}
     238:	08 95       	ret

0000023a <I2C_get_t_h_data>:

void I2C_get_t_h_data(float *temperature, float *humidity)        //Function sets value temperature and humidity;
{
     23a:	ef 92       	push	r14
     23c:	ff 92       	push	r15
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	8c 01       	movw	r16, r24
     248:	eb 01       	movw	r28, r22
	unsigned char H_msb = 0;            //Humidity most significant byte;  
	unsigned char H_lsb = 0;            //Humidity least significant byte; 
	unsigned int  H_16 = 0;             //Humidity two byte data;   
	
	//--------------Getting temperature--------------
	I2C_start_condition();
     24a:	da df       	rcall	.-76     	; 0x200 <I2C_start_condition>
	I2C_write_command(0x080);            //I2C address + write;
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	e1 df       	rcall	.-62     	; 0x212 <I2C_write_command>
	I2C_write_command(0xF3);             //Access to the temperature sensor;  
     250:	83 ef       	ldi	r24, 0xF3	; 243
     252:	df df       	rcall	.-66     	; 0x212 <I2C_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     254:	8b e7       	ldi	r24, 0x7B	; 123
     256:	92 e9       	ldi	r25, 0x92	; 146
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <I2C_get_t_h_data+0x1e>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <I2C_get_t_h_data+0x24>
     25e:	00 00       	nop
	_delay_ms(150);                      //Delay for command processing;
	I2C_start_condition();
     260:	cf df       	rcall	.-98     	; 0x200 <I2C_start_condition>
	I2C_write_command(0x080 + 1);        //I2C address + read;
     262:	81 e8       	ldi	r24, 0x81	; 129
     264:	d6 df       	rcall	.-84     	; 0x212 <I2C_write_command>
	
	T_msb = I2C_get_byte_data();         //Getting temperature data, first byte;
     266:	dc df       	rcall	.-72     	; 0x220 <I2C_get_byte_data>
     268:	f8 2e       	mov	r15, r24
	
	T_lsb = I2C_get_byte_data();         //Getting temperature data, second byte;
     26a:	da df       	rcall	.-76     	; 0x220 <I2C_get_byte_data>
     26c:	e8 2e       	mov	r14, r24
	
	I2C_NACK_checksum();                 //Checksum transmission;                         
     26e:	df df       	rcall	.-66     	; 0x22e <I2C_NACK_checksum>
	
	I2C_stop_condition();                //Stop data transmission;
     270:	cd df       	rcall	.-102    	; 0x20c <I2C_stop_condition>
	
	T_16 = (T_msb<<8) | T_lsb;	
     272:	6f 2d       	mov	r22, r15
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	76 2f       	mov	r23, r22
     278:	66 27       	eor	r22, r22
     27a:	6e 29       	or	r22, r14
	*temperature = -46.85 + (175.72 * T_16) / 65536.0;
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	ab d4       	rcall	.+2390   	; 0xbd8 <__floatunsisf>
     282:	22 e5       	ldi	r18, 0x52	; 82
     284:	38 eb       	ldi	r19, 0xB8	; 184
     286:	4f e2       	ldi	r20, 0x2F	; 47
     288:	53 e4       	ldi	r21, 0x43	; 67
     28a:	5c d5       	rcall	.+2744   	; 0xd44 <__mulsf3>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e8       	ldi	r20, 0x80	; 128
     292:	57 e3       	ldi	r21, 0x37	; 55
     294:	57 d5       	rcall	.+2734   	; 0xd44 <__mulsf3>
     296:	26 e6       	ldi	r18, 0x66	; 102
     298:	36 e6       	ldi	r19, 0x66	; 102
     29a:	4b e3       	ldi	r20, 0x3B	; 59
     29c:	52 e4       	ldi	r21, 0x42	; 66
     29e:	02 d4       	rcall	.+2052   	; 0xaa4 <__subsf3>
     2a0:	f8 01       	movw	r30, r16
     2a2:	60 83       	st	Z, r22
     2a4:	71 83       	std	Z+1, r23	; 0x01
     2a6:	82 83       	std	Z+2, r24	; 0x02
     2a8:	93 83       	std	Z+3, r25	; 0x03
	
    //--------------Getting humidity--------------
	I2C_start_condition();
     2aa:	aa df       	rcall	.-172    	; 0x200 <I2C_start_condition>
	I2C_write_command(0x080);            //I2C address + write;
     2ac:	80 e8       	ldi	r24, 0x80	; 128
     2ae:	b1 df       	rcall	.-158    	; 0x212 <I2C_write_command>
	I2C_write_command(0xF5);             //Access to the humidity sensor;
     2b0:	85 ef       	ldi	r24, 0xF5	; 245
     2b2:	af df       	rcall	.-162    	; 0x212 <I2C_write_command>
     2b4:	8b e7       	ldi	r24, 0x7B	; 123
     2b6:	92 e9       	ldi	r25, 0x92	; 146
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <I2C_get_t_h_data+0x7e>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <I2C_get_t_h_data+0x84>
     2be:	00 00       	nop
	_delay_ms(150);                      //Delay for command processing;
	I2C_start_condition();
     2c0:	9f df       	rcall	.-194    	; 0x200 <I2C_start_condition>
	I2C_write_command(0x080 + 1);        //I2C address + read;
     2c2:	81 e8       	ldi	r24, 0x81	; 129
     2c4:	a6 df       	rcall	.-180    	; 0x212 <I2C_write_command>
	
	H_msb = I2C_get_byte_data();         //Getting temperature data, first byte;
     2c6:	ac df       	rcall	.-168    	; 0x220 <I2C_get_byte_data>
     2c8:	18 2f       	mov	r17, r24
	
	H_lsb = I2C_get_byte_data();         //Getting temperature data, second byte;
     2ca:	aa df       	rcall	.-172    	; 0x220 <I2C_get_byte_data>
     2cc:	08 2f       	mov	r16, r24
	
	I2C_NACK_checksum();                 //Checksum transmission;
     2ce:	af df       	rcall	.-162    	; 0x22e <I2C_NACK_checksum>
	
	I2C_stop_condition();                //Stop data transmission;
     2d0:	9d df       	rcall	.-198    	; 0x20c <I2C_stop_condition>
	
	H_16 = (H_msb<<8) | H_lsb;
     2d2:	61 2f       	mov	r22, r17
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	76 2f       	mov	r23, r22
     2d8:	66 27       	eor	r22, r22
     2da:	60 2b       	or	r22, r16
	*humidity = (-6.0 + (125.0 * H_16) / 65536.0);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	7b d4       	rcall	.+2294   	; 0xbd8 <__floatunsisf>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	4a ef       	ldi	r20, 0xFA	; 250
     2e8:	52 e4       	ldi	r21, 0x42	; 66
     2ea:	2c d5       	rcall	.+2648   	; 0xd44 <__mulsf3>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e8       	ldi	r20, 0x80	; 128
     2f2:	57 e3       	ldi	r21, 0x37	; 55
     2f4:	27 d5       	rcall	.+2638   	; 0xd44 <__mulsf3>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	40 ec       	ldi	r20, 0xC0	; 192
     2fc:	50 e4       	ldi	r21, 0x40	; 64
     2fe:	d2 d3       	rcall	.+1956   	; 0xaa4 <__subsf3>
     300:	68 83       	st	Y, r22
     302:	79 83       	std	Y+1, r23	; 0x01
     304:	8a 83       	std	Y+2, r24	; 0x02
     306:	9b 83       	std	Y+3, r25	; 0x03
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	08 95       	ret

00000316 <LCD_ports_settings>:

#include "LCD.h"

void LCD_ports_settings(void)       //Microcontroller ports settings which connect with the LCD;
{
	DDRD |= (1<<PD7) | (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3) | (1<<PD2);
     316:	81 b3       	in	r24, 0x11	; 17
     318:	8c 6f       	ori	r24, 0xFC	; 252
     31a:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~((1<<PD7) | (1<<PD6) | (1<<PD5) | (1<<PD4) | (1<<PD3) | (1<<PD2));
     31c:	82 b3       	in	r24, 0x12	; 18
     31e:	83 70       	andi	r24, 0x03	; 3
     320:	82 bb       	out	0x12, r24	; 18
     322:	08 95       	ret

00000324 <LCD_command>:
	_delay_ms(2);
}

void LCD_command(unsigned char command)      //Commands send function.
{
	PORTD = command;
     324:	82 bb       	out	0x12, r24	; 18
	RS_0;                            //Sending command;
     326:	92 b3       	in	r25, 0x12	; 18
     328:	9b 7f       	andi	r25, 0xFB	; 251
     32a:	92 bb       	out	0x12, r25	; 18
	E_1;                             //Raising the potential on the enabling output;
     32c:	92 b3       	in	r25, 0x12	; 18
     32e:	98 60       	ori	r25, 0x08	; 8
     330:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     332:	90 e1       	ldi	r25, 0x10	; 16
     334:	9a 95       	dec	r25
     336:	f1 f7       	brne	.-4      	; 0x334 <LCD_command+0x10>
     338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_command+0x16>
	_delay_us(50);
	E_0;                             //Reducing the potential on the enabling output;
     33a:	92 b3       	in	r25, 0x12	; 18
     33c:	97 7f       	andi	r25, 0xF7	; 247
     33e:	92 bb       	out	0x12, r25	; 18
	PORTD = (command<<4);
     340:	82 95       	swap	r24
     342:	80 7f       	andi	r24, 0xF0	; 240
     344:	82 bb       	out	0x12, r24	; 18
	RS_0;
     346:	82 b3       	in	r24, 0x12	; 18
     348:	8b 7f       	andi	r24, 0xFB	; 251
     34a:	82 bb       	out	0x12, r24	; 18
	E_1;
     34c:	82 b3       	in	r24, 0x12	; 18
     34e:	88 60       	ori	r24, 0x08	; 8
     350:	82 bb       	out	0x12, r24	; 18
     352:	80 e1       	ldi	r24, 0x10	; 16
     354:	8a 95       	dec	r24
     356:	f1 f7       	brne	.-4      	; 0x354 <LCD_command+0x30>
     358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_command+0x36>
	_delay_us(50);
	E_0;
     35a:	82 b3       	in	r24, 0x12	; 18
     35c:	87 7f       	andi	r24, 0xF7	; 247
     35e:	82 bb       	out	0x12, r24	; 18
     360:	90 e1       	ldi	r25, 0x10	; 16
     362:	9a 95       	dec	r25
     364:	f1 f7       	brne	.-4      	; 0x362 <LCD_command+0x3e>
     366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_command+0x44>
     368:	08 95       	ret

0000036a <LCD_initialization>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36a:	85 ea       	ldi	r24, 0xA5	; 165
     36c:	9e e0       	ldi	r25, 0x0E	; 14
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <LCD_initialization+0x4>
     372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_initialization+0xa>
     374:	00 00       	nop
}

void LCD_initialization(void)       //LCD initialization function;
{
	_delay_ms(15);                  //Delay after power on;
	LCD_command(0b00110000);        //Standard installation function;
     376:	80 e3       	ldi	r24, 0x30	; 48
     378:	d5 df       	rcall	.-86     	; 0x324 <LCD_command>
     37a:	81 ee       	ldi	r24, 0xE1	; 225
     37c:	94 e0       	ldi	r25, 0x04	; 4
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <LCD_initialization+0x14>
     382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_initialization+0x1a>
     384:	00 00       	nop
	_delay_ms(5);
	LCD_command(0b00110000);        //Standard installation function;
     386:	80 e3       	ldi	r24, 0x30	; 48
     388:	cd df       	rcall	.-102    	; 0x324 <LCD_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38a:	91 e2       	ldi	r25, 0x21	; 33
     38c:	9a 95       	dec	r25
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_initialization+0x22>
     390:	00 00       	nop
	_delay_us(100);
	LCD_command(0b00110000);        //Standard installation function;
     392:	80 e3       	ldi	r24, 0x30	; 48
     394:	c7 df       	rcall	.-114    	; 0x324 <LCD_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     396:	89 ef       	ldi	r24, 0xF9	; 249
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_initialization+0x30>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCD_initialization+0x36>
     3a0:	00 00       	nop
	_delay_ms(1);
	LCD_command(0b00000010);        //Standard installation function;
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	bf df       	rcall	.-130    	; 0x324 <LCD_command>
     3a6:	83 ef       	ldi	r24, 0xF3	; 243
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <LCD_initialization+0x40>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCD_initialization+0x46>
     3b0:	00 00       	nop
	_delay_ms(2);
	LCD_command(0b00101000);        //Display settings: 4-bit bus mode with MPU; 2-line display; Font type - Low 5x8;
     3b2:	88 e2       	ldi	r24, 0x28	; 40
     3b4:	b7 df       	rcall	.-146    	; 0x324 <LCD_command>
     3b6:	89 ef       	ldi	r24, 0xF9	; 249
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_initialization+0x50>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_initialization+0x56>
     3c0:	00 00       	nop
	_delay_ms(1);
	LCD_command(0b00001100);        //Display ON/OFF control. Display ON; Cursor OFF; Cursor blink OFF;
     3c2:	8c e0       	ldi	r24, 0x0C	; 12
     3c4:	af df       	rcall	.-162    	; 0x324 <LCD_command>
     3c6:	89 ef       	ldi	r24, 0xF9	; 249
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_initialization+0x60>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_initialization+0x66>
     3d0:	00 00       	nop
	_delay_ms(1);
	LCD_command(0b00000001);        //Clear display;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	a7 df       	rcall	.-178    	; 0x324 <LCD_command>
     3d6:	83 ef       	ldi	r24, 0xF3	; 243
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_initialization+0x70>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_initialization+0x76>
     3e0:	00 00       	nop
	_delay_ms(2);
	LCD_command(0b00000110);        //Entry mode set. Cursor moves to right;
     3e2:	86 e0       	ldi	r24, 0x06	; 6
     3e4:	9f df       	rcall	.-194    	; 0x324 <LCD_command>
     3e6:	89 ef       	ldi	r24, 0xF9	; 249
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_initialization+0x80>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_initialization+0x86>
     3f0:	00 00       	nop
     3f2:	08 95       	ret

000003f4 <LCD_clean>:
	_delay_ms(1);
}

void LCD_clean(void)                //Function cleans the LCD;
{
	LCD_command(0b00000001);        //Clear display command;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	96 df       	rcall	.-212    	; 0x324 <LCD_command>
     3f8:	83 ef       	ldi	r24, 0xF3	; 243
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_clean+0x8>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	08 95       	ret

00000406 <LCD_data>:
	_delay_us(50);
}

void LCD_data(unsigned char data)      //Data send function.
{
	PORTD = data;
     406:	82 bb       	out	0x12, r24	; 18
	RS_1;                              //Sending data;
     408:	92 b3       	in	r25, 0x12	; 18
     40a:	94 60       	ori	r25, 0x04	; 4
     40c:	92 bb       	out	0x12, r25	; 18
	E_1;                               //Raising the potential on the enabling output;
     40e:	92 b3       	in	r25, 0x12	; 18
     410:	98 60       	ori	r25, 0x08	; 8
     412:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     414:	90 e1       	ldi	r25, 0x10	; 16
     416:	9a 95       	dec	r25
     418:	f1 f7       	brne	.-4      	; 0x416 <LCD_data+0x10>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <LCD_data+0x16>
	_delay_us(50);
	E_0;                               //Reducing the potential on the enabling output;
     41c:	92 b3       	in	r25, 0x12	; 18
     41e:	97 7f       	andi	r25, 0xF7	; 247
     420:	92 bb       	out	0x12, r25	; 18
	PORTD = (data<<4);
     422:	82 95       	swap	r24
     424:	80 7f       	andi	r24, 0xF0	; 240
     426:	82 bb       	out	0x12, r24	; 18
	RS_1;
     428:	82 b3       	in	r24, 0x12	; 18
     42a:	84 60       	ori	r24, 0x04	; 4
     42c:	82 bb       	out	0x12, r24	; 18
	E_1;
     42e:	82 b3       	in	r24, 0x12	; 18
     430:	88 60       	ori	r24, 0x08	; 8
     432:	82 bb       	out	0x12, r24	; 18
     434:	80 e1       	ldi	r24, 0x10	; 16
     436:	8a 95       	dec	r24
     438:	f1 f7       	brne	.-4      	; 0x436 <LCD_data+0x30>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_data+0x36>
	_delay_us(50);
	E_0;
     43c:	82 b3       	in	r24, 0x12	; 18
     43e:	87 7f       	andi	r24, 0xF7	; 247
     440:	82 bb       	out	0x12, r24	; 18
     442:	90 e1       	ldi	r25, 0x10	; 16
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <LCD_data+0x3e>
     448:	00 c0       	rjmp	.+0      	; 0x44a <LCD_data+0x44>
     44a:	08 95       	ret

0000044c <LCD_set_address>:
	_delay_us(50);
}

void LCD_set_address(uint8_t line, uint8_t position)               //Setting the output position on the LCD display;
{
	switch(line)
     44c:	88 23       	and	r24, r24
     44e:	19 f0       	breq	.+6      	; 0x456 <LCD_set_address+0xa>
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	29 f0       	breq	.+10     	; 0x45e <LCD_set_address+0x12>
     454:	08 95       	ret
	{
		case 0: LCD_command(position | (1<<7)); break;             //Setting output address. The first line and position number;
     456:	86 2f       	mov	r24, r22
     458:	80 68       	ori	r24, 0x80	; 128
     45a:	64 df       	rcall	.-312    	; 0x324 <LCD_command>
     45c:	08 95       	ret
		case 1: LCD_command((position + 0x40) | (1<<7)); break;    //Setting output address. The second line and position number.
     45e:	80 e4       	ldi	r24, 0x40	; 64
     460:	86 0f       	add	r24, r22
     462:	80 68       	ori	r24, 0x80	; 128
     464:	5f df       	rcall	.-322    	; 0x324 <LCD_command>
     466:	08 95       	ret

00000468 <LCD_print_string>:
	}
}

void LCD_print_string(char str_arr[])                              //Output data to LCD;
{
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	8c 01       	movw	r16, r24
	for(int i = 0; str_arr[i] != '\0'; ++i)
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	d0 e0       	ldi	r29, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <LCD_print_string+0x14>
	{
		LCD_data(str_arr[i]);
     478:	c6 df       	rcall	.-116    	; 0x406 <LCD_data>
	}
}

void LCD_print_string(char str_arr[])                              //Output data to LCD;
{
	for(int i = 0; str_arr[i] != '\0'; ++i)
     47a:	21 96       	adiw	r28, 0x01	; 1
     47c:	f8 01       	movw	r30, r16
     47e:	ec 0f       	add	r30, r28
     480:	fd 1f       	adc	r31, r29
     482:	80 81       	ld	r24, Z
     484:	81 11       	cpse	r24, r1
     486:	f8 cf       	rjmp	.-16     	; 0x478 <LCD_print_string+0x10>
	{
		LCD_data(str_arr[i]);
	}
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <LCD_show_t_h>:

void LCD_show_t_h(float s_t, float s_h, float c_t, float c_h)       //Function displays set temperature and actual temperature;
{                                                                   //Not used 'sprintf()' function, because it uses 20% more program memory.
     492:	4f 92       	push	r4
     494:	5f 92       	push	r5
     496:	6f 92       	push	r6
     498:	7f 92       	push	r7
     49a:	af 92       	push	r10
     49c:	bf 92       	push	r11
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	64 97       	sbiw	r28, 0x14	; 20
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	6d 87       	std	Y+13, r22	; 0x0d
     4c0:	7e 87       	std	Y+14, r23	; 0x0e
     4c2:	8f 87       	std	Y+15, r24	; 0x0f
     4c4:	98 8b       	std	Y+16, r25	; 0x10
     4c6:	29 01       	movw	r4, r18
     4c8:	3a 01       	movw	r6, r20
     4ca:	e9 8a       	std	Y+17, r14	; 0x11
     4cc:	fa 8a       	std	Y+18, r15	; 0x12
     4ce:	0b 8b       	std	Y+19, r16	; 0x13
     4d0:	1c 8b       	std	Y+20, r17	; 0x14
	LCD_clean();
     4d2:	90 df       	rcall	.-224    	; 0x3f4 <LCD_clean>
	
	char temperature[6];
	char humidity[6];
	
	//--------Settled temperature and humidity--------
	LCD_set_address(0, 0);                                          //Setting the output position. First line, zero position;
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	b9 df       	rcall	.-142    	; 0x44c <LCD_set_address>
	LCD_print_string("St:");
     4da:	80 e6       	ldi	r24, 0x60	; 96
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	c4 df       	rcall	.-120    	; 0x468 <LCD_print_string>
	dtostrf(s_t, 2, 1, temperature);
     4e0:	8e 01       	movw	r16, r28
     4e2:	0f 5f       	subi	r16, 0xFF	; 255
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	42 e0       	ldi	r20, 0x02	; 2
     4ea:	6d 85       	ldd	r22, Y+13	; 0x0d
     4ec:	7e 85       	ldd	r23, Y+14	; 0x0e
     4ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f0:	98 89       	ldd	r25, Y+16	; 0x10
     4f2:	7f d6       	rcall	.+3326   	; 0x11f2 <dtostrf>
	LCD_print_string(temperature);
     4f4:	c8 01       	movw	r24, r16
     4f6:	b8 df       	rcall	.-144    	; 0x468 <LCD_print_string>
	LCD_print_string("C");
     4f8:	84 e6       	ldi	r24, 0x64	; 100
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	b5 df       	rcall	.-150    	; 0x468 <LCD_print_string>
	
	LCD_set_address(0, 10);                                          //Setting the output position. First line, zero position;
     4fe:	6a e0       	ldi	r22, 0x0A	; 10
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	a4 df       	rcall	.-184    	; 0x44c <LCD_set_address>
	LCD_print_string("h:");
     504:	86 e6       	ldi	r24, 0x66	; 102
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	af df       	rcall	.-162    	; 0x468 <LCD_print_string>
	dtostrf(s_h, 2, 0, humidity);
     50a:	0a 5f       	subi	r16, 0xFA	; 250
     50c:	1f 4f       	sbci	r17, 0xFF	; 255
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	42 e0       	ldi	r20, 0x02	; 2
     512:	c3 01       	movw	r24, r6
     514:	b2 01       	movw	r22, r4
     516:	6d d6       	rcall	.+3290   	; 0x11f2 <dtostrf>
	LCD_print_string(humidity);
     518:	c8 01       	movw	r24, r16
     51a:	a6 df       	rcall	.-180    	; 0x468 <LCD_print_string>
	LCD_print_string("%");
     51c:	89 e6       	ldi	r24, 0x69	; 105
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a3 df       	rcall	.-186    	; 0x468 <LCD_print_string>
	
	//--------Current temperature and humidity--------
	LCD_set_address(1, 0);                                           //Setting the output position. Second line, zero position;
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	92 df       	rcall	.-220    	; 0x44c <LCD_set_address>
	LCD_print_string("Ct:");
     528:	8b e6       	ldi	r24, 0x6B	; 107
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	9d df       	rcall	.-198    	; 0x468 <LCD_print_string>
	dtostrf(c_t, 2, 1, temperature);
     52e:	06 50       	subi	r16, 0x06	; 6
     530:	11 09       	sbc	r17, r1
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	42 e0       	ldi	r20, 0x02	; 2
     536:	69 89       	ldd	r22, Y+17	; 0x11
     538:	7a 89       	ldd	r23, Y+18	; 0x12
     53a:	8b 89       	ldd	r24, Y+19	; 0x13
     53c:	9c 89       	ldd	r25, Y+20	; 0x14
     53e:	59 d6       	rcall	.+3250   	; 0x11f2 <dtostrf>
	LCD_print_string(temperature);
     540:	c8 01       	movw	r24, r16
     542:	92 df       	rcall	.-220    	; 0x468 <LCD_print_string>
	LCD_print_string("C");
     544:	84 e6       	ldi	r24, 0x64	; 100
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	8f df       	rcall	.-226    	; 0x468 <LCD_print_string>
	
	LCD_set_address(1, 10);                                          //Setting the output position. First line, zero position;
     54a:	6a e0       	ldi	r22, 0x0A	; 10
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	7e df       	rcall	.-260    	; 0x44c <LCD_set_address>
	LCD_print_string("h:");
     550:	86 e6       	ldi	r24, 0x66	; 102
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	89 df       	rcall	.-238    	; 0x468 <LCD_print_string>
	dtostrf(c_h, 2, 0, humidity);
     556:	0a 5f       	subi	r16, 0xFA	; 250
     558:	1f 4f       	sbci	r17, 0xFF	; 255
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	42 e0       	ldi	r20, 0x02	; 2
     55e:	c6 01       	movw	r24, r12
     560:	b5 01       	movw	r22, r10
     562:	47 d6       	rcall	.+3214   	; 0x11f2 <dtostrf>
	LCD_print_string(humidity);
     564:	c8 01       	movw	r24, r16
     566:	80 df       	rcall	.-256    	; 0x468 <LCD_print_string>
	LCD_print_string("%");
     568:	89 e6       	ldi	r24, 0x69	; 105
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	7d df       	rcall	.-262    	; 0x468 <LCD_print_string>
     56e:	64 96       	adiw	r28, 0x14	; 20
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	7f 90       	pop	r7
     590:	6f 90       	pop	r6
     592:	5f 90       	pop	r5
     594:	4f 90       	pop	r4
     596:	08 95       	ret

00000598 <main>:
 */ 

#include "main.h"

int main(void)
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	2c 97       	sbiw	r28, 0x0c	; 12
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
	LCD_ports_settings();             // Microcontroller ports settings which connect with the LCD; 
     5ac:	b4 de       	rcall	.-664    	; 0x316 <LCD_ports_settings>

	LCD_initialization();             // LCD initialization function;
     5ae:	dd de       	rcall	.-582    	; 0x36a <LCD_initialization>
	
	T_H_button_settings();            // Ports settings for buttons;
     5b0:	66 d2       	rcall	.+1228   	; 0xa7e <T_H_button_settings>
	
	T_H_controller_port_settings();   // Ports settings for temperature and humidity controller;
     5b2:	d2 d1       	rcall	.+932    	; 0x958 <T_H_controller_port_settings>
	
	I2C_settings();                   // Function TWI/I2C settings;  
     5b4:	1f de       	rcall	.-962    	; 0x1f4 <I2C_settings>
	
	SPI_master_init();                // SPI initialization function;
     5b6:	78 d1       	rcall	.+752    	; 0x8a8 <SPI_master_init>
	
	float set_t = EEPROM_read(1);     // Settled temperature;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	12 de       	rcall	.-988    	; 0x1e2 <EEPROM_read>
     5be:	68 2f       	mov	r22, r24
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	08 d3       	rcall	.+1552   	; 0xbd8 <__floatunsisf>
     5c8:	2b 01       	movw	r4, r22
     5ca:	3c 01       	movw	r6, r24
	float set_h = EEPROM_read(0);	  // Settled humidity;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 de       	rcall	.-1008   	; 0x1e2 <EEPROM_read>
     5d2:	68 2f       	mov	r22, r24
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	fe d2       	rcall	.+1532   	; 0xbd8 <__floatunsisf>
     5dc:	69 87       	std	Y+9, r22	; 0x09
     5de:	7a 87       	std	Y+10, r23	; 0x0a
     5e0:	8b 87       	std	Y+11, r24	; 0x0b
     5e2:	9c 87       	std	Y+12, r25	; 0x0c
	
	float cur_t = 0;                  // Current temperature from I2C;
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	1a 82       	std	Y+2, r1	; 0x02
     5e8:	1b 82       	std	Y+3, r1	; 0x03
     5ea:	1c 82       	std	Y+4, r1	; 0x04
	float cur_h = 0;                  // Current humidity from I2
     5ec:	1d 82       	std	Y+5, r1	; 0x05
     5ee:	1e 82       	std	Y+6, r1	; 0x06
     5f0:	1f 82       	std	Y+7, r1	; 0x07
     5f2:	18 86       	std	Y+8, r1	; 0x08
   
    while (1) 
    { 		
		I2C_get_t_h_data(&cur_t, &cur_h);                // Get temperature and humidity from SHT21;
     5f4:	be 01       	movw	r22, r28
     5f6:	6b 5f       	subi	r22, 0xFB	; 251
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	1d de       	rcall	.-966    	; 0x23a <I2C_get_t_h_data>
			
		LCD_show_t_h(set_t, set_h, cur_t, cur_h);        // Display temperature and humidity on LCD; 
     600:	ad 80       	ldd	r10, Y+5	; 0x05
     602:	be 80       	ldd	r11, Y+6	; 0x06
     604:	cf 80       	ldd	r12, Y+7	; 0x07
     606:	d8 84       	ldd	r13, Y+8	; 0x08
     608:	e9 80       	ldd	r14, Y+1	; 0x01
     60a:	fa 80       	ldd	r15, Y+2	; 0x02
     60c:	0b 81       	ldd	r16, Y+3	; 0x03
     60e:	1c 81       	ldd	r17, Y+4	; 0x04
     610:	29 85       	ldd	r18, Y+9	; 0x09
     612:	3a 85       	ldd	r19, Y+10	; 0x0a
     614:	4b 85       	ldd	r20, Y+11	; 0x0b
     616:	5c 85       	ldd	r21, Y+12	; 0x0c
     618:	c3 01       	movw	r24, r6
     61a:	b2 01       	movw	r22, r4
     61c:	3a df       	rcall	.-396    	; 0x492 <LCD_show_t_h>
 				
		T_H_maintain(set_t, set_h, cur_t, cur_h);	     // Controlling heating and cooling; 
     61e:	ad 80       	ldd	r10, Y+5	; 0x05
     620:	be 80       	ldd	r11, Y+6	; 0x06
     622:	cf 80       	ldd	r12, Y+7	; 0x07
     624:	d8 84       	ldd	r13, Y+8	; 0x08
     626:	e9 80       	ldd	r14, Y+1	; 0x01
     628:	fa 80       	ldd	r15, Y+2	; 0x02
     62a:	0b 81       	ldd	r16, Y+3	; 0x03
     62c:	1c 81       	ldd	r17, Y+4	; 0x04
     62e:	29 85       	ldd	r18, Y+9	; 0x09
     630:	3a 85       	ldd	r19, Y+10	; 0x0a
     632:	4b 85       	ldd	r20, Y+11	; 0x0b
     634:	5c 85       	ldd	r21, Y+12	; 0x0c
     636:	c3 01       	movw	r24, r6
     638:	b2 01       	movw	r22, r4
     63a:	9b d1       	rcall	.+822    	; 0x972 <T_H_maintain>
	
		SPI_send_t_h(cur_t, cur_h);                      // Sending data to slave MC;
     63c:	2d 81       	ldd	r18, Y+5	; 0x05
     63e:	3e 81       	ldd	r19, Y+6	; 0x06
     640:	4f 81       	ldd	r20, Y+7	; 0x07
     642:	58 85       	ldd	r21, Y+8	; 0x08
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	7a 81       	ldd	r23, Y+2	; 0x02
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	9c 81       	ldd	r25, Y+4	; 0x04
     64c:	36 d1       	rcall	.+620    	; 0x8ba <SPI_send_t_h>
		
		//----------Humidity controlling----------	
		if(~PIND & (1<<PD0))               //PD0 button pressed, humidity +;
     64e:	80 99       	sbic	0x10, 0	; 16
     650:	26 c0       	rjmp	.+76     	; 0x69e <main+0x106>
		{
			while(~PIND & (1<<PD0))        //Contact bounce
     652:	80 9b       	sbis	0x10, 0	; 16
     654:	fe cf       	rjmp	.-4      	; 0x652 <main+0xba>
			;
			set_h++;
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e8       	ldi	r20, 0x80	; 128
     65c:	5f e3       	ldi	r21, 0x3F	; 63
     65e:	69 85       	ldd	r22, Y+9	; 0x09
     660:	7a 85       	ldd	r23, Y+10	; 0x0a
     662:	8b 85       	ldd	r24, Y+11	; 0x0b
     664:	9c 85       	ldd	r25, Y+12	; 0x0c
     666:	1f d2       	rcall	.+1086   	; 0xaa6 <__addsf3>
     668:	69 87       	std	Y+9, r22	; 0x09
     66a:	7a 87       	std	Y+10, r23	; 0x0a
     66c:	8b 87       	std	Y+11, r24	; 0x0b
     66e:	9c 87       	std	Y+12, r25	; 0x0c
			if(set_h > 100)
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	48 ec       	ldi	r20, 0xC8	; 200
     676:	52 e4       	ldi	r21, 0x42	; 66
     678:	61 d3       	rcall	.+1730   	; 0xd3c <__gesf2>
     67a:	18 16       	cp	r1, r24
     67c:	44 f4       	brge	.+16     	; 0x68e <main+0xf6>
				set_h = 100;
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	a8 ec       	ldi	r26, 0xC8	; 200
     684:	b2 e4       	ldi	r27, 0x42	; 66
     686:	89 87       	std	Y+9, r24	; 0x09
     688:	9a 87       	std	Y+10, r25	; 0x0a
     68a:	ab 87       	std	Y+11, r26	; 0x0b
     68c:	bc 87       	std	Y+12, r27	; 0x0c
			EEPROM_write(0, set_h);
     68e:	69 85       	ldd	r22, Y+9	; 0x09
     690:	7a 85       	ldd	r23, Y+10	; 0x0a
     692:	8b 85       	ldd	r24, Y+11	; 0x0b
     694:	9c 85       	ldd	r25, Y+12	; 0x0c
     696:	74 d2       	rcall	.+1256   	; 0xb80 <__fixunssfsi>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	96 dd       	rcall	.-1236   	; 0x1ca <EEPROM_write>
		}
		
		if(~PIND & (1<<PD1))               //PD1 button pressed, humidity -;
     69e:	81 99       	sbic	0x10, 1	; 16
     6a0:	21 c0       	rjmp	.+66     	; 0x6e4 <main+0x14c>
		{
			while(~PIND & (1<<PD1))        //Contact bounce
     6a2:	81 9b       	sbis	0x10, 1	; 16
     6a4:	fe cf       	rjmp	.-4      	; 0x6a2 <main+0x10a>
			;
			set_h--;
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	5f e3       	ldi	r21, 0x3F	; 63
     6ae:	69 85       	ldd	r22, Y+9	; 0x09
     6b0:	7a 85       	ldd	r23, Y+10	; 0x0a
     6b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b6:	f6 d1       	rcall	.+1004   	; 0xaa4 <__subsf3>
     6b8:	69 87       	std	Y+9, r22	; 0x09
     6ba:	7a 87       	std	Y+10, r23	; 0x0a
     6bc:	8b 87       	std	Y+11, r24	; 0x0b
     6be:	9c 87       	std	Y+12, r25	; 0x0c
			if(set_h < 0)
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	a9 01       	movw	r20, r18
     6c6:	53 d2       	rcall	.+1190   	; 0xb6e <__cmpsf2>
     6c8:	88 23       	and	r24, r24
     6ca:	24 f4       	brge	.+8      	; 0x6d4 <main+0x13c>
				set_h = 0;
     6cc:	19 86       	std	Y+9, r1	; 0x09
     6ce:	1a 86       	std	Y+10, r1	; 0x0a
     6d0:	1b 86       	std	Y+11, r1	; 0x0b
     6d2:	1c 86       	std	Y+12, r1	; 0x0c
			EEPROM_write(0, set_h);
     6d4:	69 85       	ldd	r22, Y+9	; 0x09
     6d6:	7a 85       	ldd	r23, Y+10	; 0x0a
     6d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6da:	9c 85       	ldd	r25, Y+12	; 0x0c
     6dc:	51 d2       	rcall	.+1186   	; 0xb80 <__fixunssfsi>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	73 dd       	rcall	.-1306   	; 0x1ca <EEPROM_write>
		}
			
		//----------Temperature controlling----------
		if(~PINC & (1<<PC3))               //PC3 button pressed, temperature +;
     6e4:	9b 99       	sbic	0x13, 3	; 19
     6e6:	20 c0       	rjmp	.+64     	; 0x728 <main+0x190>
		{
			while(~PINC & (1<<PC3))        //Contact bounce
     6e8:	9b 9b       	sbis	0x13, 3	; 19
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <main+0x150>
			;
			set_t += 0.1;
     6ec:	2d ec       	ldi	r18, 0xCD	; 205
     6ee:	3c ec       	ldi	r19, 0xCC	; 204
     6f0:	4c ec       	ldi	r20, 0xCC	; 204
     6f2:	5d e3       	ldi	r21, 0x3D	; 61
     6f4:	c3 01       	movw	r24, r6
     6f6:	b2 01       	movw	r22, r4
     6f8:	d6 d1       	rcall	.+940    	; 0xaa6 <__addsf3>
     6fa:	2b 01       	movw	r4, r22
     6fc:	3c 01       	movw	r6, r24
			if(set_t > 120)
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 ef       	ldi	r20, 0xF0	; 240
     704:	52 e4       	ldi	r21, 0x42	; 66
     706:	1a d3       	rcall	.+1588   	; 0xd3c <__gesf2>
     708:	18 16       	cp	r1, r24
     70a:	44 f4       	brge	.+16     	; 0x71c <main+0x184>
				set_t = 120;
     70c:	0f 2e       	mov	r0, r31
     70e:	41 2c       	mov	r4, r1
     710:	51 2c       	mov	r5, r1
     712:	f0 ef       	ldi	r31, 0xF0	; 240
     714:	6f 2e       	mov	r6, r31
     716:	f2 e4       	ldi	r31, 0x42	; 66
     718:	7f 2e       	mov	r7, r31
     71a:	f0 2d       	mov	r31, r0
			EEPROM_write(1, set_t);
     71c:	c3 01       	movw	r24, r6
     71e:	b2 01       	movw	r22, r4
     720:	2f d2       	rcall	.+1118   	; 0xb80 <__fixunssfsi>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	51 dd       	rcall	.-1374   	; 0x1ca <EEPROM_write>
		}
				
		if(~PINB & (1<<PB7))               //PB7 button pressed, temperature -;
     728:	b7 99       	sbic	0x16, 7	; 22
     72a:	64 cf       	rjmp	.-312    	; 0x5f4 <main+0x5c>
		{
			while(~PINB & (1<<PB7))        //Contact bounce
     72c:	b7 9b       	sbis	0x16, 7	; 22
     72e:	fe cf       	rjmp	.-4      	; 0x72c <main+0x194>
			;
			set_t -= 0.1;
     730:	2d ec       	ldi	r18, 0xCD	; 205
     732:	3c ec       	ldi	r19, 0xCC	; 204
     734:	4c ec       	ldi	r20, 0xCC	; 204
     736:	5d e3       	ldi	r21, 0x3D	; 61
     738:	c3 01       	movw	r24, r6
     73a:	b2 01       	movw	r22, r4
     73c:	b3 d1       	rcall	.+870    	; 0xaa4 <__subsf3>
     73e:	2b 01       	movw	r4, r22
     740:	3c 01       	movw	r6, r24
			if(set_t < -40)
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e2       	ldi	r20, 0x20	; 32
     748:	52 ec       	ldi	r21, 0xC2	; 194
     74a:	11 d2       	rcall	.+1058   	; 0xb6e <__cmpsf2>
     74c:	88 23       	and	r24, r24
     74e:	44 f4       	brge	.+16     	; 0x760 <main+0x1c8>
				set_t = -40;
     750:	0f 2e       	mov	r0, r31
     752:	41 2c       	mov	r4, r1
     754:	51 2c       	mov	r5, r1
     756:	f0 e2       	ldi	r31, 0x20	; 32
     758:	6f 2e       	mov	r6, r31
     75a:	f2 ec       	ldi	r31, 0xC2	; 194
     75c:	7f 2e       	mov	r7, r31
     75e:	f0 2d       	mov	r31, r0
			EEPROM_write(1, set_t);
     760:	c3 01       	movw	r24, r6
     762:	b2 01       	movw	r22, r4
     764:	0d d2       	rcall	.+1050   	; 0xb80 <__fixunssfsi>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	2f dd       	rcall	.-1442   	; 0x1ca <EEPROM_write>
     76c:	43 cf       	rjmp	.-378    	; 0x5f4 <main+0x5c>

0000076e <reverse>:

#include "secondary_functions.h"

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     76e:	61 50       	subi	r22, 0x01	; 1
     770:	71 09       	sbc	r23, r1
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
	while (i < j) {
     776:	0e c0       	rjmp	.+28     	; 0x794 <reverse+0x26>
		temp = str[i];
     778:	dc 01       	movw	r26, r24
     77a:	a2 0f       	add	r26, r18
     77c:	b3 1f       	adc	r27, r19
     77e:	4c 91       	ld	r20, X
		str[i] = str[j];
     780:	fc 01       	movw	r30, r24
     782:	e6 0f       	add	r30, r22
     784:	f7 1f       	adc	r31, r23
     786:	50 81       	ld	r21, Z
     788:	5c 93       	st	X, r21
		str[j] = temp;
     78a:	40 83       	st	Z, r20
		i++;
     78c:	2f 5f       	subi	r18, 0xFF	; 255
     78e:	3f 4f       	sbci	r19, 0xFF	; 255
		j--;
     790:	61 50       	subi	r22, 0x01	; 1
     792:	71 09       	sbc	r23, r1
#include "secondary_functions.h"

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
     794:	26 17       	cp	r18, r22
     796:	37 07       	cpc	r19, r23
     798:	7c f3       	brlt	.-34     	; 0x778 <reverse+0xa>
		str[i] = str[j];
		str[j] = temp;
		i++;
		j--;
	}
}
     79a:	08 95       	ret

0000079c <intToStr>:

int intToStr(int x, char str[], int d)          // Function convert int to string;
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	8b 01       	movw	r16, r22
     7a6:	9a 01       	movw	r18, r20
	int i = 0;
     7a8:	c0 e0       	ldi	r28, 0x00	; 0
     7aa:	d0 e0       	ldi	r29, 0x00	; 0
	while (x)
     7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <intToStr+0x28>
	{
		str[i++] = (x % 10) + '0';
     7ae:	f8 01       	movw	r30, r16
     7b0:	ec 0f       	add	r30, r28
     7b2:	fd 1f       	adc	r31, r29
     7b4:	6a e0       	ldi	r22, 0x0A	; 10
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	f5 d4       	rcall	.+2538   	; 0x11a4 <__divmodhi4>
     7ba:	80 5d       	subi	r24, 0xD0	; 208
     7bc:	80 83       	st	Z, r24
		x = x / 10;
     7be:	86 2f       	mov	r24, r22
     7c0:	97 2f       	mov	r25, r23
int intToStr(int x, char str[], int d)          // Function convert int to string;
{
	int i = 0;
	while (x)
	{
		str[i++] = (x % 10) + '0';
     7c2:	21 96       	adiw	r28, 0x01	; 1
}

int intToStr(int x, char str[], int d)          // Function convert int to string;
{
	int i = 0;
	while (x)
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	99 f7       	brne	.-26     	; 0x7ae <intToStr+0x12>
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <intToStr+0x3a>
	{
		str[i++] = (x % 10) + '0';
		x = x / 10;
	}
	while (i < d)
	str[i++] = '0';
     7ca:	f8 01       	movw	r30, r16
     7cc:	ec 0f       	add	r30, r28
     7ce:	fd 1f       	adc	r31, r29
     7d0:	80 e3       	ldi	r24, 0x30	; 48
     7d2:	80 83       	st	Z, r24
     7d4:	21 96       	adiw	r28, 0x01	; 1
	while (x)
	{
		str[i++] = (x % 10) + '0';
		x = x / 10;
	}
	while (i < d)
     7d6:	c2 17       	cp	r28, r18
     7d8:	d3 07       	cpc	r29, r19
     7da:	bc f3       	brlt	.-18     	; 0x7ca <intToStr+0x2e>
	str[i++] = '0';
	
	reverse(str, i);
     7dc:	be 01       	movw	r22, r28
     7de:	c8 01       	movw	r24, r16
     7e0:	c6 df       	rcall	.-116    	; 0x76e <reverse>
	str[i] = '\0';
     7e2:	f8 01       	movw	r30, r16
     7e4:	ec 0f       	add	r30, r28
     7e6:	fd 1f       	adc	r31, r29
     7e8:	10 82       	st	Z, r1
	return i;
}
     7ea:	ce 01       	movw	r24, r28
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <ftoa>:

void ftoa(float n, char* arr, int afterpoint)     // Function convert float to string;
{
     7f6:	4f 92       	push	r4
     7f8:	5f 92       	push	r5
     7fa:	6f 92       	push	r6
     7fc:	7f 92       	push	r7
     7fe:	8f 92       	push	r8
     800:	9f 92       	push	r9
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	2b 01       	movw	r4, r22
     814:	3c 01       	movw	r6, r24
     816:	7a 01       	movw	r14, r20
     818:	89 01       	movw	r16, r18
	int ipart = (int)n;                           // Extract integer part;
     81a:	ad d1       	rcall	.+858    	; 0xb76 <__fixsfsi>
     81c:	4b 01       	movw	r8, r22
     81e:	5c 01       	movw	r10, r24
	float fpart = n - (float)ipart;               // Extract floating part
     820:	07 2e       	mov	r0, r23
     822:	00 0c       	add	r0, r0
     824:	88 0b       	sbc	r24, r24
     826:	99 0b       	sbc	r25, r25
     828:	d9 d1       	rcall	.+946    	; 0xbdc <__floatsisf>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
     82e:	c3 01       	movw	r24, r6
     830:	b2 01       	movw	r22, r4
     832:	38 d1       	rcall	.+624    	; 0xaa4 <__subsf3>
     834:	2b 01       	movw	r4, r22
     836:	3c 01       	movw	r6, r24
	int i = intToStr(ipart, arr, 0);              // convert integer part to string
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	b7 01       	movw	r22, r14
     83e:	c4 01       	movw	r24, r8
     840:	ad df       	rcall	.-166    	; 0x79c <intToStr>
     842:	ec 01       	movw	r28, r24
	
	if (afterpoint != 0)                          // check for display option after point
     844:	01 15       	cp	r16, r1
     846:	11 05       	cpc	r17, r1
     848:	01 f1       	breq	.+64     	; 0x88a <ftoa+0x94>
	{
		arr[i] = '.';                             // add dot
     84a:	f7 01       	movw	r30, r14
     84c:	e8 0f       	add	r30, r24
     84e:	f9 1f       	adc	r31, r25
     850:	8e e2       	ldi	r24, 0x2E	; 46
     852:	80 83       	st	Z, r24
		fpart = fpart * pow(10, afterpoint);
     854:	b8 01       	movw	r22, r16
     856:	01 2e       	mov	r0, r17
     858:	00 0c       	add	r0, r0
     85a:	88 0b       	sbc	r24, r24
     85c:	99 0b       	sbc	r25, r25
     85e:	be d1       	rcall	.+892    	; 0xbdc <__floatsisf>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 e2       	ldi	r24, 0x20	; 32
     86a:	91 e4       	ldi	r25, 0x41	; 65
     86c:	ce d2       	rcall	.+1436   	; 0xe0a <pow>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	c3 01       	movw	r24, r6
     874:	b2 01       	movw	r22, r4
     876:	66 d2       	rcall	.+1228   	; 0xd44 <__mulsf3>
		intToStr((int)fpart, arr + i + 1, afterpoint);
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	ce 0d       	add	r28, r14
     87c:	df 1d       	adc	r29, r15
     87e:	7b d1       	rcall	.+758    	; 0xb76 <__fixsfsi>
     880:	dc 01       	movw	r26, r24
     882:	cb 01       	movw	r24, r22
     884:	a8 01       	movw	r20, r16
     886:	be 01       	movw	r22, r28
     888:	89 df       	rcall	.-238    	; 0x79c <intToStr>
	}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	7f 90       	pop	r7
     8a0:	6f 90       	pop	r6
     8a2:	5f 90       	pop	r5
     8a4:	4f 90       	pop	r4
     8a6:	08 95       	ret

000008a8 <SPI_master_init>:

#include "SPI.h"

void SPI_master_init(void)                             // SPI initialization function;
{
 	DDRB = (1<<SS) | (1<<MOSI) | (1<<SCK);             // Set MOSI and SCK output, all others input;
     8a8:	8c e2       	ldi	r24, 0x2C	; 44
     8aa:	87 bb       	out	0x17, r24	; 23
 	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);           // Enable SPI, Master, set clock rate fck/16;
     8ac:	81 e5       	ldi	r24, 0x51	; 81
     8ae:	8d b9       	out	0x0d, r24	; 13
     8b0:	08 95       	ret

000008b2 <SPI_master_transmit>:
}
 
void SPI_master_transmit(char cData)                   // SPI data send function; 
{
	SPDR = cData;                                      // Start transmission;
     8b2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)))                         // Wait for transmission complete;
     8b4:	77 9b       	sbis	0x0e, 7	; 14
     8b6:	fe cf       	rjmp	.-4      	; 0x8b4 <SPI_master_transmit+0x2>
	;
}
     8b8:	08 95       	ret

000008ba <SPI_send_t_h>:

void SPI_send_t_h(float temperature, float humidity)   // Function sends temperature and humidity to slave microcontroller;
{
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	28 97       	sbiw	r28, 0x08	; 8
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	69 01       	movw	r12, r18
     8dc:	7a 01       	movw	r14, r20
	char t_str[5];                                     // Char array to temperature;
	char h_str[3];                                     // Char array to humidity;

	ftoa(temperature, t_str, 1);                       // Convert float to string;  
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	ae 01       	movw	r20, r28
     8e4:	4f 5f       	subi	r20, 0xFF	; 255
     8e6:	5f 4f       	sbci	r21, 0xFF	; 255
     8e8:	86 df       	rcall	.-244    	; 0x7f6 <ftoa>
	for(int i = 0; i < 5; ++i)
     8ea:	00 e0       	ldi	r16, 0x00	; 0
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	0a c0       	rjmp	.+20     	; 0x904 <SPI_send_t_h+0x4a>
	{
		SPI_master_transmit(t_str[i]);                 // Send char data to slave MC;
     8f0:	e1 e0       	ldi	r30, 0x01	; 1
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ec 0f       	add	r30, r28
     8f6:	fd 1f       	adc	r31, r29
     8f8:	e0 0f       	add	r30, r16
     8fa:	f1 1f       	adc	r31, r17
     8fc:	80 81       	ld	r24, Z
     8fe:	d9 df       	rcall	.-78     	; 0x8b2 <SPI_master_transmit>
{
	char t_str[5];                                     // Char array to temperature;
	char h_str[3];                                     // Char array to humidity;

	ftoa(temperature, t_str, 1);                       // Convert float to string;  
	for(int i = 0; i < 5; ++i)
     900:	0f 5f       	subi	r16, 0xFF	; 255
     902:	1f 4f       	sbci	r17, 0xFF	; 255
     904:	05 30       	cpi	r16, 0x05	; 5
     906:	11 05       	cpc	r17, r1
     908:	9c f3       	brlt	.-26     	; 0x8f0 <SPI_send_t_h+0x36>
	{
		SPI_master_transmit(t_str[i]);                 // Send char data to slave MC;
	}
	
	ftoa(humidity, h_str, 0);                          // Convert float to string;
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	ae 01       	movw	r20, r28
     910:	4a 5f       	subi	r20, 0xFA	; 250
     912:	5f 4f       	sbci	r21, 0xFF	; 255
     914:	c7 01       	movw	r24, r14
     916:	b6 01       	movw	r22, r12
     918:	6e df       	rcall	.-292    	; 0x7f6 <ftoa>
	for(int i = 0; i < 3; ++i)
     91a:	00 e0       	ldi	r16, 0x00	; 0
     91c:	10 e0       	ldi	r17, 0x00	; 0
     91e:	0a c0       	rjmp	.+20     	; 0x934 <SPI_send_t_h+0x7a>
	{
		SPI_master_transmit(h_str[i]);                 // Send char data to slave MC;
     920:	e6 e0       	ldi	r30, 0x06	; 6
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ec 0f       	add	r30, r28
     926:	fd 1f       	adc	r31, r29
     928:	e0 0f       	add	r30, r16
     92a:	f1 1f       	adc	r31, r17
     92c:	80 81       	ld	r24, Z
     92e:	c1 df       	rcall	.-126    	; 0x8b2 <SPI_master_transmit>
	{
		SPI_master_transmit(t_str[i]);                 // Send char data to slave MC;
	}
	
	ftoa(humidity, h_str, 0);                          // Convert float to string;
	for(int i = 0; i < 3; ++i)
     930:	0f 5f       	subi	r16, 0xFF	; 255
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	03 30       	cpi	r16, 0x03	; 3
     936:	11 05       	cpc	r17, r1
     938:	9c f3       	brlt	.-26     	; 0x920 <SPI_send_t_h+0x66>
	{
		SPI_master_transmit(h_str[i]);                 // Send char data to slave MC;
	}
}
     93a:	28 96       	adiw	r28, 0x08	; 8
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	08 95       	ret

00000958 <T_H_controller_port_settings>:
#include "T_H_controller.h"

void T_H_controller_port_settings(void)          //Function for port settings to control the temperature and humidity;
{
	//----------Temperature controlling----------
	DDRC |= (1<<HEATING) | (1<<REQUIRED_T) | (1<<COOLING);
     958:	84 b3       	in	r24, 0x14	; 20
     95a:	87 60       	ori	r24, 0x07	; 7
     95c:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1<<HEATING) | (1<<REQUIRED_T) | (1<<COOLING));
     95e:	85 b3       	in	r24, 0x15	; 21
     960:	88 7f       	andi	r24, 0xF8	; 248
     962:	85 bb       	out	0x15, r24	; 21
	
	//----------Humidity controlling----------
	DDRB |= (1<<DRYING) | (1<<REQUIRED_H) | (1<<HYDRATION);
     964:	87 b3       	in	r24, 0x17	; 23
     966:	83 64       	ori	r24, 0x43	; 67
     968:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<DRYING) | (1<<REQUIRED_H) | (1<<HYDRATION)); 
     96a:	88 b3       	in	r24, 0x18	; 24
     96c:	8c 7b       	andi	r24, 0xBC	; 188
     96e:	88 bb       	out	0x18, r24	; 24
     970:	08 95       	ret

00000972 <T_H_maintain>:
}

void T_H_maintain(float set_t, float set_h, float cur_t, float cur_h)    // Function control heating and cooling;        
{
     972:	4f 92       	push	r4
     974:	5f 92       	push	r5
     976:	6f 92       	push	r6
     978:	7f 92       	push	r7
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	28 97       	sbiw	r28, 0x08	; 8
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	2b 01       	movw	r4, r22
     9a0:	3c 01       	movw	r6, r24
     9a2:	2d 83       	std	Y+5, r18	; 0x05
     9a4:	3e 83       	std	Y+6, r19	; 0x06
     9a6:	4f 83       	std	Y+7, r20	; 0x07
     9a8:	58 87       	std	Y+8, r21	; 0x08
     9aa:	e9 82       	std	Y+1, r14	; 0x01
     9ac:	fa 82       	std	Y+2, r15	; 0x02
     9ae:	0b 83       	std	Y+3, r16	; 0x03
     9b0:	1c 83       	std	Y+4, r17	; 0x04
	//--------Temperature--------
	if(set_t > cur_t)
     9b2:	a8 01       	movw	r20, r16
     9b4:	97 01       	movw	r18, r14
     9b6:	c2 d1       	rcall	.+900    	; 0xd3c <__gesf2>
     9b8:	18 16       	cp	r1, r24
     9ba:	3c f4       	brge	.+14     	; 0x9ca <T_H_maintain+0x58>
	{
		PORTC |= (1<<HEATING);
     9bc:	85 b3       	in	r24, 0x15	; 21
     9be:	81 60       	ori	r24, 0x01	; 1
     9c0:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~((1<<REQUIRED_T) | (1<<COOLING));
     9c2:	85 b3       	in	r24, 0x15	; 21
     9c4:	89 7f       	andi	r24, 0xF9	; 249
     9c6:	85 bb       	out	0x15, r24	; 21
     9c8:	1f c0       	rjmp	.+62     	; 0xa08 <T_H_maintain+0x96>
	}
	else if(set_t < cur_t)
     9ca:	29 81       	ldd	r18, Y+1	; 0x01
     9cc:	3a 81       	ldd	r19, Y+2	; 0x02
     9ce:	4b 81       	ldd	r20, Y+3	; 0x03
     9d0:	5c 81       	ldd	r21, Y+4	; 0x04
     9d2:	c3 01       	movw	r24, r6
     9d4:	b2 01       	movw	r22, r4
     9d6:	cb d0       	rcall	.+406    	; 0xb6e <__cmpsf2>
     9d8:	88 23       	and	r24, r24
     9da:	3c f4       	brge	.+14     	; 0x9ea <T_H_maintain+0x78>
	{
		PORTC |= (1<<COOLING);
     9dc:	85 b3       	in	r24, 0x15	; 21
     9de:	84 60       	ori	r24, 0x04	; 4
     9e0:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~((1<<HEATING) | (1<<REQUIRED_T));
     9e2:	85 b3       	in	r24, 0x15	; 21
     9e4:	8c 7f       	andi	r24, 0xFC	; 252
     9e6:	85 bb       	out	0x15, r24	; 21
     9e8:	0f c0       	rjmp	.+30     	; 0xa08 <T_H_maintain+0x96>
	}
	else if(set_t == cur_t)
     9ea:	29 81       	ldd	r18, Y+1	; 0x01
     9ec:	3a 81       	ldd	r19, Y+2	; 0x02
     9ee:	4b 81       	ldd	r20, Y+3	; 0x03
     9f0:	5c 81       	ldd	r21, Y+4	; 0x04
     9f2:	c3 01       	movw	r24, r6
     9f4:	b2 01       	movw	r22, r4
     9f6:	bb d0       	rcall	.+374    	; 0xb6e <__cmpsf2>
     9f8:	81 11       	cpse	r24, r1
     9fa:	06 c0       	rjmp	.+12     	; 0xa08 <T_H_maintain+0x96>
	{
		PORTC |= (1<<REQUIRED_T);
     9fc:	85 b3       	in	r24, 0x15	; 21
     9fe:	82 60       	ori	r24, 0x02	; 2
     a00:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~((1<<HEATING) | (1<<COOLING));
     a02:	85 b3       	in	r24, 0x15	; 21
     a04:	8a 7f       	andi	r24, 0xFA	; 250
     a06:	85 bb       	out	0x15, r24	; 21
	}
	
	//----------Humidity----------
	if((int)set_h < (int)cur_h)
     a08:	6d 81       	ldd	r22, Y+5	; 0x05
     a0a:	7e 81       	ldd	r23, Y+6	; 0x06
     a0c:	8f 81       	ldd	r24, Y+7	; 0x07
     a0e:	98 85       	ldd	r25, Y+8	; 0x08
     a10:	b2 d0       	rcall	.+356    	; 0xb76 <__fixsfsi>
     a12:	3b 01       	movw	r6, r22
     a14:	c6 01       	movw	r24, r12
     a16:	b5 01       	movw	r22, r10
     a18:	ae d0       	rcall	.+348    	; 0xb76 <__fixsfsi>
     a1a:	66 16       	cp	r6, r22
     a1c:	77 06       	cpc	r7, r23
     a1e:	3c f4       	brge	.+14     	; 0xa2e <T_H_maintain+0xbc>
	{
		PORTB |= (1<<DRYING);
     a20:	88 b3       	in	r24, 0x18	; 24
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~((1<<REQUIRED_H) | (1<<HYDRATION));
     a26:	88 b3       	in	r24, 0x18	; 24
     a28:	8d 7b       	andi	r24, 0xBD	; 189
     a2a:	88 bb       	out	0x18, r24	; 24
     a2c:	13 c0       	rjmp	.+38     	; 0xa54 <T_H_maintain+0xe2>
	}
	else if((int)set_h > (int)cur_h)
     a2e:	66 15       	cp	r22, r6
     a30:	77 05       	cpc	r23, r7
     a32:	3c f4       	brge	.+14     	; 0xa42 <T_H_maintain+0xd0>
	{
		PORTB |= (1<<HYDRATION);
     a34:	88 b3       	in	r24, 0x18	; 24
     a36:	80 64       	ori	r24, 0x40	; 64
     a38:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~((1<<DRYING) | (1<<REQUIRED_H));
     a3a:	88 b3       	in	r24, 0x18	; 24
     a3c:	8c 7f       	andi	r24, 0xFC	; 252
     a3e:	88 bb       	out	0x18, r24	; 24
     a40:	09 c0       	rjmp	.+18     	; 0xa54 <T_H_maintain+0xe2>
	}
	else if((int)set_h == (int)cur_h)
     a42:	66 16       	cp	r6, r22
     a44:	77 06       	cpc	r7, r23
     a46:	31 f4       	brne	.+12     	; 0xa54 <T_H_maintain+0xe2>
	{
		PORTB |= (1<<REQUIRED_H);
     a48:	88 b3       	in	r24, 0x18	; 24
     a4a:	82 60       	ori	r24, 0x02	; 2
     a4c:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~((1<<DRYING) | (1<<HYDRATION));
     a4e:	88 b3       	in	r24, 0x18	; 24
     a50:	8e 7b       	andi	r24, 0xBE	; 190
     a52:	88 bb       	out	0x18, r24	; 24
	}
}
     a54:	28 96       	adiw	r28, 0x08	; 8
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	7f 90       	pop	r7
     a76:	6f 90       	pop	r6
     a78:	5f 90       	pop	r5
     a7a:	4f 90       	pop	r4
     a7c:	08 95       	ret

00000a7e <T_H_button_settings>:


void T_H_button_settings(void)           //Ports settings for buttons;
{
	//--------Temperature--------
	DDRC &= ~(1<<PC3);  
     a7e:	84 b3       	in	r24, 0x14	; 20
     a80:	87 7f       	andi	r24, 0xF7	; 247
     a82:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC3);
     a84:	85 b3       	in	r24, 0x15	; 21
     a86:	88 60       	ori	r24, 0x08	; 8
     a88:	85 bb       	out	0x15, r24	; 21
	
	DDRB &= ~(1<<PB7);
     a8a:	87 b3       	in	r24, 0x17	; 23
     a8c:	8f 77       	andi	r24, 0x7F	; 127
     a8e:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB7);
     a90:	88 b3       	in	r24, 0x18	; 24
     a92:	80 68       	ori	r24, 0x80	; 128
     a94:	88 bb       	out	0x18, r24	; 24
	
	//----------Humidity----------
	DDRD &= ~((1<<PD0) | (1<<PD1));
     a96:	81 b3       	in	r24, 0x11	; 17
     a98:	8c 7f       	andi	r24, 0xFC	; 252
     a9a:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD0) | (1<<PD1);
     a9c:	82 b3       	in	r24, 0x12	; 18
     a9e:	83 60       	ori	r24, 0x03	; 3
     aa0:	82 bb       	out	0x12, r24	; 18
     aa2:	08 95       	ret

00000aa4 <__subsf3>:
     aa4:	50 58       	subi	r21, 0x80	; 128

00000aa6 <__addsf3>:
     aa6:	bb 27       	eor	r27, r27
     aa8:	aa 27       	eor	r26, r26
     aaa:	0e d0       	rcall	.+28     	; 0xac8 <__addsf3x>
     aac:	0d c1       	rjmp	.+538    	; 0xcc8 <__fp_round>
     aae:	fe d0       	rcall	.+508    	; 0xcac <__fp_pscA>
     ab0:	30 f0       	brcs	.+12     	; 0xabe <__addsf3+0x18>
     ab2:	03 d1       	rcall	.+518    	; 0xcba <__fp_pscB>
     ab4:	20 f0       	brcs	.+8      	; 0xabe <__addsf3+0x18>
     ab6:	31 f4       	brne	.+12     	; 0xac4 <__addsf3+0x1e>
     ab8:	9f 3f       	cpi	r25, 0xFF	; 255
     aba:	11 f4       	brne	.+4      	; 0xac0 <__addsf3+0x1a>
     abc:	1e f4       	brtc	.+6      	; 0xac4 <__addsf3+0x1e>
     abe:	f3 c0       	rjmp	.+486    	; 0xca6 <__fp_nan>
     ac0:	0e f4       	brtc	.+2      	; 0xac4 <__addsf3+0x1e>
     ac2:	e0 95       	com	r30
     ac4:	e7 fb       	bst	r30, 7
     ac6:	e9 c0       	rjmp	.+466    	; 0xc9a <__fp_inf>

00000ac8 <__addsf3x>:
     ac8:	e9 2f       	mov	r30, r25
     aca:	0f d1       	rcall	.+542    	; 0xcea <__fp_split3>
     acc:	80 f3       	brcs	.-32     	; 0xaae <__addsf3+0x8>
     ace:	ba 17       	cp	r27, r26
     ad0:	62 07       	cpc	r22, r18
     ad2:	73 07       	cpc	r23, r19
     ad4:	84 07       	cpc	r24, r20
     ad6:	95 07       	cpc	r25, r21
     ad8:	18 f0       	brcs	.+6      	; 0xae0 <__addsf3x+0x18>
     ada:	71 f4       	brne	.+28     	; 0xaf8 <__addsf3x+0x30>
     adc:	9e f5       	brtc	.+102    	; 0xb44 <__addsf3x+0x7c>
     ade:	27 c1       	rjmp	.+590    	; 0xd2e <__fp_zero>
     ae0:	0e f4       	brtc	.+2      	; 0xae4 <__addsf3x+0x1c>
     ae2:	e0 95       	com	r30
     ae4:	0b 2e       	mov	r0, r27
     ae6:	ba 2f       	mov	r27, r26
     ae8:	a0 2d       	mov	r26, r0
     aea:	0b 01       	movw	r0, r22
     aec:	b9 01       	movw	r22, r18
     aee:	90 01       	movw	r18, r0
     af0:	0c 01       	movw	r0, r24
     af2:	ca 01       	movw	r24, r20
     af4:	a0 01       	movw	r20, r0
     af6:	11 24       	eor	r1, r1
     af8:	ff 27       	eor	r31, r31
     afa:	59 1b       	sub	r21, r25
     afc:	99 f0       	breq	.+38     	; 0xb24 <__addsf3x+0x5c>
     afe:	59 3f       	cpi	r21, 0xF9	; 249
     b00:	50 f4       	brcc	.+20     	; 0xb16 <__addsf3x+0x4e>
     b02:	50 3e       	cpi	r21, 0xE0	; 224
     b04:	68 f1       	brcs	.+90     	; 0xb60 <__addsf3x+0x98>
     b06:	1a 16       	cp	r1, r26
     b08:	f0 40       	sbci	r31, 0x00	; 0
     b0a:	a2 2f       	mov	r26, r18
     b0c:	23 2f       	mov	r18, r19
     b0e:	34 2f       	mov	r19, r20
     b10:	44 27       	eor	r20, r20
     b12:	58 5f       	subi	r21, 0xF8	; 248
     b14:	f3 cf       	rjmp	.-26     	; 0xafc <__addsf3x+0x34>
     b16:	46 95       	lsr	r20
     b18:	37 95       	ror	r19
     b1a:	27 95       	ror	r18
     b1c:	a7 95       	ror	r26
     b1e:	f0 40       	sbci	r31, 0x00	; 0
     b20:	53 95       	inc	r21
     b22:	c9 f7       	brne	.-14     	; 0xb16 <__addsf3x+0x4e>
     b24:	7e f4       	brtc	.+30     	; 0xb44 <__addsf3x+0x7c>
     b26:	1f 16       	cp	r1, r31
     b28:	ba 0b       	sbc	r27, r26
     b2a:	62 0b       	sbc	r22, r18
     b2c:	73 0b       	sbc	r23, r19
     b2e:	84 0b       	sbc	r24, r20
     b30:	ba f0       	brmi	.+46     	; 0xb60 <__addsf3x+0x98>
     b32:	91 50       	subi	r25, 0x01	; 1
     b34:	a1 f0       	breq	.+40     	; 0xb5e <__addsf3x+0x96>
     b36:	ff 0f       	add	r31, r31
     b38:	bb 1f       	adc	r27, r27
     b3a:	66 1f       	adc	r22, r22
     b3c:	77 1f       	adc	r23, r23
     b3e:	88 1f       	adc	r24, r24
     b40:	c2 f7       	brpl	.-16     	; 0xb32 <__addsf3x+0x6a>
     b42:	0e c0       	rjmp	.+28     	; 0xb60 <__addsf3x+0x98>
     b44:	ba 0f       	add	r27, r26
     b46:	62 1f       	adc	r22, r18
     b48:	73 1f       	adc	r23, r19
     b4a:	84 1f       	adc	r24, r20
     b4c:	48 f4       	brcc	.+18     	; 0xb60 <__addsf3x+0x98>
     b4e:	87 95       	ror	r24
     b50:	77 95       	ror	r23
     b52:	67 95       	ror	r22
     b54:	b7 95       	ror	r27
     b56:	f7 95       	ror	r31
     b58:	9e 3f       	cpi	r25, 0xFE	; 254
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <__addsf3x+0x96>
     b5c:	b3 cf       	rjmp	.-154    	; 0xac4 <__addsf3+0x1e>
     b5e:	93 95       	inc	r25
     b60:	88 0f       	add	r24, r24
     b62:	08 f0       	brcs	.+2      	; 0xb66 <__addsf3x+0x9e>
     b64:	99 27       	eor	r25, r25
     b66:	ee 0f       	add	r30, r30
     b68:	97 95       	ror	r25
     b6a:	87 95       	ror	r24
     b6c:	08 95       	ret

00000b6e <__cmpsf2>:
     b6e:	71 d0       	rcall	.+226    	; 0xc52 <__fp_cmp>
     b70:	08 f4       	brcc	.+2      	; 0xb74 <__cmpsf2+0x6>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	08 95       	ret

00000b76 <__fixsfsi>:
     b76:	04 d0       	rcall	.+8      	; 0xb80 <__fixunssfsi>
     b78:	68 94       	set
     b7a:	b1 11       	cpse	r27, r1
     b7c:	d9 c0       	rjmp	.+434    	; 0xd30 <__fp_szero>
     b7e:	08 95       	ret

00000b80 <__fixunssfsi>:
     b80:	bc d0       	rcall	.+376    	; 0xcfa <__fp_splitA>
     b82:	88 f0       	brcs	.+34     	; 0xba6 <__fixunssfsi+0x26>
     b84:	9f 57       	subi	r25, 0x7F	; 127
     b86:	90 f0       	brcs	.+36     	; 0xbac <__fixunssfsi+0x2c>
     b88:	b9 2f       	mov	r27, r25
     b8a:	99 27       	eor	r25, r25
     b8c:	b7 51       	subi	r27, 0x17	; 23
     b8e:	a0 f0       	brcs	.+40     	; 0xbb8 <__fixunssfsi+0x38>
     b90:	d1 f0       	breq	.+52     	; 0xbc6 <__fixunssfsi+0x46>
     b92:	66 0f       	add	r22, r22
     b94:	77 1f       	adc	r23, r23
     b96:	88 1f       	adc	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	1a f0       	brmi	.+6      	; 0xba2 <__fixunssfsi+0x22>
     b9c:	ba 95       	dec	r27
     b9e:	c9 f7       	brne	.-14     	; 0xb92 <__fixunssfsi+0x12>
     ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <__fixunssfsi+0x46>
     ba2:	b1 30       	cpi	r27, 0x01	; 1
     ba4:	81 f0       	breq	.+32     	; 0xbc6 <__fixunssfsi+0x46>
     ba6:	c3 d0       	rcall	.+390    	; 0xd2e <__fp_zero>
     ba8:	b1 e0       	ldi	r27, 0x01	; 1
     baa:	08 95       	ret
     bac:	c0 c0       	rjmp	.+384    	; 0xd2e <__fp_zero>
     bae:	67 2f       	mov	r22, r23
     bb0:	78 2f       	mov	r23, r24
     bb2:	88 27       	eor	r24, r24
     bb4:	b8 5f       	subi	r27, 0xF8	; 248
     bb6:	39 f0       	breq	.+14     	; 0xbc6 <__fixunssfsi+0x46>
     bb8:	b9 3f       	cpi	r27, 0xF9	; 249
     bba:	cc f3       	brlt	.-14     	; 0xbae <__fixunssfsi+0x2e>
     bbc:	86 95       	lsr	r24
     bbe:	77 95       	ror	r23
     bc0:	67 95       	ror	r22
     bc2:	b3 95       	inc	r27
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <__fixunssfsi+0x3c>
     bc6:	3e f4       	brtc	.+14     	; 0xbd6 <__fixunssfsi+0x56>
     bc8:	90 95       	com	r25
     bca:	80 95       	com	r24
     bcc:	70 95       	com	r23
     bce:	61 95       	neg	r22
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	8f 4f       	sbci	r24, 0xFF	; 255
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	08 95       	ret

00000bd8 <__floatunsisf>:
     bd8:	e8 94       	clt
     bda:	09 c0       	rjmp	.+18     	; 0xbee <__floatsisf+0x12>

00000bdc <__floatsisf>:
     bdc:	97 fb       	bst	r25, 7
     bde:	3e f4       	brtc	.+14     	; 0xbee <__floatsisf+0x12>
     be0:	90 95       	com	r25
     be2:	80 95       	com	r24
     be4:	70 95       	com	r23
     be6:	61 95       	neg	r22
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	8f 4f       	sbci	r24, 0xFF	; 255
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	99 23       	and	r25, r25
     bf0:	a9 f0       	breq	.+42     	; 0xc1c <__floatsisf+0x40>
     bf2:	f9 2f       	mov	r31, r25
     bf4:	96 e9       	ldi	r25, 0x96	; 150
     bf6:	bb 27       	eor	r27, r27
     bf8:	93 95       	inc	r25
     bfa:	f6 95       	lsr	r31
     bfc:	87 95       	ror	r24
     bfe:	77 95       	ror	r23
     c00:	67 95       	ror	r22
     c02:	b7 95       	ror	r27
     c04:	f1 11       	cpse	r31, r1
     c06:	f8 cf       	rjmp	.-16     	; 0xbf8 <__floatsisf+0x1c>
     c08:	fa f4       	brpl	.+62     	; 0xc48 <__floatsisf+0x6c>
     c0a:	bb 0f       	add	r27, r27
     c0c:	11 f4       	brne	.+4      	; 0xc12 <__floatsisf+0x36>
     c0e:	60 ff       	sbrs	r22, 0
     c10:	1b c0       	rjmp	.+54     	; 0xc48 <__floatsisf+0x6c>
     c12:	6f 5f       	subi	r22, 0xFF	; 255
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	8f 4f       	sbci	r24, 0xFF	; 255
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	16 c0       	rjmp	.+44     	; 0xc48 <__floatsisf+0x6c>
     c1c:	88 23       	and	r24, r24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <__floatsisf+0x48>
     c20:	96 e9       	ldi	r25, 0x96	; 150
     c22:	11 c0       	rjmp	.+34     	; 0xc46 <__floatsisf+0x6a>
     c24:	77 23       	and	r23, r23
     c26:	21 f0       	breq	.+8      	; 0xc30 <__floatsisf+0x54>
     c28:	9e e8       	ldi	r25, 0x8E	; 142
     c2a:	87 2f       	mov	r24, r23
     c2c:	76 2f       	mov	r23, r22
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__floatsisf+0x5e>
     c30:	66 23       	and	r22, r22
     c32:	71 f0       	breq	.+28     	; 0xc50 <__floatsisf+0x74>
     c34:	96 e8       	ldi	r25, 0x86	; 134
     c36:	86 2f       	mov	r24, r22
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	2a f0       	brmi	.+10     	; 0xc48 <__floatsisf+0x6c>
     c3e:	9a 95       	dec	r25
     c40:	66 0f       	add	r22, r22
     c42:	77 1f       	adc	r23, r23
     c44:	88 1f       	adc	r24, r24
     c46:	da f7       	brpl	.-10     	; 0xc3e <__floatsisf+0x62>
     c48:	88 0f       	add	r24, r24
     c4a:	96 95       	lsr	r25
     c4c:	87 95       	ror	r24
     c4e:	97 f9       	bld	r25, 7
     c50:	08 95       	ret

00000c52 <__fp_cmp>:
     c52:	99 0f       	add	r25, r25
     c54:	00 08       	sbc	r0, r0
     c56:	55 0f       	add	r21, r21
     c58:	aa 0b       	sbc	r26, r26
     c5a:	e0 e8       	ldi	r30, 0x80	; 128
     c5c:	fe ef       	ldi	r31, 0xFE	; 254
     c5e:	16 16       	cp	r1, r22
     c60:	17 06       	cpc	r1, r23
     c62:	e8 07       	cpc	r30, r24
     c64:	f9 07       	cpc	r31, r25
     c66:	c0 f0       	brcs	.+48     	; 0xc98 <__fp_cmp+0x46>
     c68:	12 16       	cp	r1, r18
     c6a:	13 06       	cpc	r1, r19
     c6c:	e4 07       	cpc	r30, r20
     c6e:	f5 07       	cpc	r31, r21
     c70:	98 f0       	brcs	.+38     	; 0xc98 <__fp_cmp+0x46>
     c72:	62 1b       	sub	r22, r18
     c74:	73 0b       	sbc	r23, r19
     c76:	84 0b       	sbc	r24, r20
     c78:	95 0b       	sbc	r25, r21
     c7a:	39 f4       	brne	.+14     	; 0xc8a <__fp_cmp+0x38>
     c7c:	0a 26       	eor	r0, r26
     c7e:	61 f0       	breq	.+24     	; 0xc98 <__fp_cmp+0x46>
     c80:	23 2b       	or	r18, r19
     c82:	24 2b       	or	r18, r20
     c84:	25 2b       	or	r18, r21
     c86:	21 f4       	brne	.+8      	; 0xc90 <__fp_cmp+0x3e>
     c88:	08 95       	ret
     c8a:	0a 26       	eor	r0, r26
     c8c:	09 f4       	brne	.+2      	; 0xc90 <__fp_cmp+0x3e>
     c8e:	a1 40       	sbci	r26, 0x01	; 1
     c90:	a6 95       	lsr	r26
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	81 1d       	adc	r24, r1
     c96:	81 1d       	adc	r24, r1
     c98:	08 95       	ret

00000c9a <__fp_inf>:
     c9a:	97 f9       	bld	r25, 7
     c9c:	9f 67       	ori	r25, 0x7F	; 127
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	08 95       	ret

00000ca6 <__fp_nan>:
     ca6:	9f ef       	ldi	r25, 0xFF	; 255
     ca8:	80 ec       	ldi	r24, 0xC0	; 192
     caa:	08 95       	ret

00000cac <__fp_pscA>:
     cac:	00 24       	eor	r0, r0
     cae:	0a 94       	dec	r0
     cb0:	16 16       	cp	r1, r22
     cb2:	17 06       	cpc	r1, r23
     cb4:	18 06       	cpc	r1, r24
     cb6:	09 06       	cpc	r0, r25
     cb8:	08 95       	ret

00000cba <__fp_pscB>:
     cba:	00 24       	eor	r0, r0
     cbc:	0a 94       	dec	r0
     cbe:	12 16       	cp	r1, r18
     cc0:	13 06       	cpc	r1, r19
     cc2:	14 06       	cpc	r1, r20
     cc4:	05 06       	cpc	r0, r21
     cc6:	08 95       	ret

00000cc8 <__fp_round>:
     cc8:	09 2e       	mov	r0, r25
     cca:	03 94       	inc	r0
     ccc:	00 0c       	add	r0, r0
     cce:	11 f4       	brne	.+4      	; 0xcd4 <__fp_round+0xc>
     cd0:	88 23       	and	r24, r24
     cd2:	52 f0       	brmi	.+20     	; 0xce8 <__fp_round+0x20>
     cd4:	bb 0f       	add	r27, r27
     cd6:	40 f4       	brcc	.+16     	; 0xce8 <__fp_round+0x20>
     cd8:	bf 2b       	or	r27, r31
     cda:	11 f4       	brne	.+4      	; 0xce0 <__fp_round+0x18>
     cdc:	60 ff       	sbrs	r22, 0
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <__fp_round+0x20>
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	8f 4f       	sbci	r24, 0xFF	; 255
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	08 95       	ret

00000cea <__fp_split3>:
     cea:	57 fd       	sbrc	r21, 7
     cec:	90 58       	subi	r25, 0x80	; 128
     cee:	44 0f       	add	r20, r20
     cf0:	55 1f       	adc	r21, r21
     cf2:	59 f0       	breq	.+22     	; 0xd0a <__fp_splitA+0x10>
     cf4:	5f 3f       	cpi	r21, 0xFF	; 255
     cf6:	71 f0       	breq	.+28     	; 0xd14 <__fp_splitA+0x1a>
     cf8:	47 95       	ror	r20

00000cfa <__fp_splitA>:
     cfa:	88 0f       	add	r24, r24
     cfc:	97 fb       	bst	r25, 7
     cfe:	99 1f       	adc	r25, r25
     d00:	61 f0       	breq	.+24     	; 0xd1a <__fp_splitA+0x20>
     d02:	9f 3f       	cpi	r25, 0xFF	; 255
     d04:	79 f0       	breq	.+30     	; 0xd24 <__fp_splitA+0x2a>
     d06:	87 95       	ror	r24
     d08:	08 95       	ret
     d0a:	12 16       	cp	r1, r18
     d0c:	13 06       	cpc	r1, r19
     d0e:	14 06       	cpc	r1, r20
     d10:	55 1f       	adc	r21, r21
     d12:	f2 cf       	rjmp	.-28     	; 0xcf8 <__fp_split3+0xe>
     d14:	46 95       	lsr	r20
     d16:	f1 df       	rcall	.-30     	; 0xcfa <__fp_splitA>
     d18:	08 c0       	rjmp	.+16     	; 0xd2a <__fp_splitA+0x30>
     d1a:	16 16       	cp	r1, r22
     d1c:	17 06       	cpc	r1, r23
     d1e:	18 06       	cpc	r1, r24
     d20:	99 1f       	adc	r25, r25
     d22:	f1 cf       	rjmp	.-30     	; 0xd06 <__fp_splitA+0xc>
     d24:	86 95       	lsr	r24
     d26:	71 05       	cpc	r23, r1
     d28:	61 05       	cpc	r22, r1
     d2a:	08 94       	sec
     d2c:	08 95       	ret

00000d2e <__fp_zero>:
     d2e:	e8 94       	clt

00000d30 <__fp_szero>:
     d30:	bb 27       	eor	r27, r27
     d32:	66 27       	eor	r22, r22
     d34:	77 27       	eor	r23, r23
     d36:	cb 01       	movw	r24, r22
     d38:	97 f9       	bld	r25, 7
     d3a:	08 95       	ret

00000d3c <__gesf2>:
     d3c:	8a df       	rcall	.-236    	; 0xc52 <__fp_cmp>
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <__gesf2+0x6>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	08 95       	ret

00000d44 <__mulsf3>:
     d44:	0b d0       	rcall	.+22     	; 0xd5c <__mulsf3x>
     d46:	c0 cf       	rjmp	.-128    	; 0xcc8 <__fp_round>
     d48:	b1 df       	rcall	.-158    	; 0xcac <__fp_pscA>
     d4a:	28 f0       	brcs	.+10     	; 0xd56 <__mulsf3+0x12>
     d4c:	b6 df       	rcall	.-148    	; 0xcba <__fp_pscB>
     d4e:	18 f0       	brcs	.+6      	; 0xd56 <__mulsf3+0x12>
     d50:	95 23       	and	r25, r21
     d52:	09 f0       	breq	.+2      	; 0xd56 <__mulsf3+0x12>
     d54:	a2 cf       	rjmp	.-188    	; 0xc9a <__fp_inf>
     d56:	a7 cf       	rjmp	.-178    	; 0xca6 <__fp_nan>
     d58:	11 24       	eor	r1, r1
     d5a:	ea cf       	rjmp	.-44     	; 0xd30 <__fp_szero>

00000d5c <__mulsf3x>:
     d5c:	c6 df       	rcall	.-116    	; 0xcea <__fp_split3>
     d5e:	a0 f3       	brcs	.-24     	; 0xd48 <__mulsf3+0x4>

00000d60 <__mulsf3_pse>:
     d60:	95 9f       	mul	r25, r21
     d62:	d1 f3       	breq	.-12     	; 0xd58 <__mulsf3+0x14>
     d64:	95 0f       	add	r25, r21
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	55 1f       	adc	r21, r21
     d6a:	62 9f       	mul	r22, r18
     d6c:	f0 01       	movw	r30, r0
     d6e:	72 9f       	mul	r23, r18
     d70:	bb 27       	eor	r27, r27
     d72:	f0 0d       	add	r31, r0
     d74:	b1 1d       	adc	r27, r1
     d76:	63 9f       	mul	r22, r19
     d78:	aa 27       	eor	r26, r26
     d7a:	f0 0d       	add	r31, r0
     d7c:	b1 1d       	adc	r27, r1
     d7e:	aa 1f       	adc	r26, r26
     d80:	64 9f       	mul	r22, r20
     d82:	66 27       	eor	r22, r22
     d84:	b0 0d       	add	r27, r0
     d86:	a1 1d       	adc	r26, r1
     d88:	66 1f       	adc	r22, r22
     d8a:	82 9f       	mul	r24, r18
     d8c:	22 27       	eor	r18, r18
     d8e:	b0 0d       	add	r27, r0
     d90:	a1 1d       	adc	r26, r1
     d92:	62 1f       	adc	r22, r18
     d94:	73 9f       	mul	r23, r19
     d96:	b0 0d       	add	r27, r0
     d98:	a1 1d       	adc	r26, r1
     d9a:	62 1f       	adc	r22, r18
     d9c:	83 9f       	mul	r24, r19
     d9e:	a0 0d       	add	r26, r0
     da0:	61 1d       	adc	r22, r1
     da2:	22 1f       	adc	r18, r18
     da4:	74 9f       	mul	r23, r20
     da6:	33 27       	eor	r19, r19
     da8:	a0 0d       	add	r26, r0
     daa:	61 1d       	adc	r22, r1
     dac:	23 1f       	adc	r18, r19
     dae:	84 9f       	mul	r24, r20
     db0:	60 0d       	add	r22, r0
     db2:	21 1d       	adc	r18, r1
     db4:	82 2f       	mov	r24, r18
     db6:	76 2f       	mov	r23, r22
     db8:	6a 2f       	mov	r22, r26
     dba:	11 24       	eor	r1, r1
     dbc:	9f 57       	subi	r25, 0x7F	; 127
     dbe:	50 40       	sbci	r21, 0x00	; 0
     dc0:	8a f0       	brmi	.+34     	; 0xde4 <__mulsf3_pse+0x84>
     dc2:	e1 f0       	breq	.+56     	; 0xdfc <__mulsf3_pse+0x9c>
     dc4:	88 23       	and	r24, r24
     dc6:	4a f0       	brmi	.+18     	; 0xdda <__mulsf3_pse+0x7a>
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	bb 1f       	adc	r27, r27
     dce:	66 1f       	adc	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	91 50       	subi	r25, 0x01	; 1
     dd6:	50 40       	sbci	r21, 0x00	; 0
     dd8:	a9 f7       	brne	.-22     	; 0xdc4 <__mulsf3_pse+0x64>
     dda:	9e 3f       	cpi	r25, 0xFE	; 254
     ddc:	51 05       	cpc	r21, r1
     dde:	70 f0       	brcs	.+28     	; 0xdfc <__mulsf3_pse+0x9c>
     de0:	5c cf       	rjmp	.-328    	; 0xc9a <__fp_inf>
     de2:	a6 cf       	rjmp	.-180    	; 0xd30 <__fp_szero>
     de4:	5f 3f       	cpi	r21, 0xFF	; 255
     de6:	ec f3       	brlt	.-6      	; 0xde2 <__mulsf3_pse+0x82>
     de8:	98 3e       	cpi	r25, 0xE8	; 232
     dea:	dc f3       	brlt	.-10     	; 0xde2 <__mulsf3_pse+0x82>
     dec:	86 95       	lsr	r24
     dee:	77 95       	ror	r23
     df0:	67 95       	ror	r22
     df2:	b7 95       	ror	r27
     df4:	f7 95       	ror	r31
     df6:	e7 95       	ror	r30
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	c1 f7       	brne	.-16     	; 0xdec <__mulsf3_pse+0x8c>
     dfc:	fe 2b       	or	r31, r30
     dfe:	88 0f       	add	r24, r24
     e00:	91 1d       	adc	r25, r1
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	97 f9       	bld	r25, 7
     e08:	08 95       	ret

00000e0a <pow>:
     e0a:	fa 01       	movw	r30, r20
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	30 96       	adiw	r30, 0x00	; 0
     e12:	21 05       	cpc	r18, r1
     e14:	31 05       	cpc	r19, r1
     e16:	99 f1       	breq	.+102    	; 0xe7e <pow+0x74>
     e18:	61 15       	cp	r22, r1
     e1a:	71 05       	cpc	r23, r1
     e1c:	61 f4       	brne	.+24     	; 0xe36 <pow+0x2c>
     e1e:	80 38       	cpi	r24, 0x80	; 128
     e20:	bf e3       	ldi	r27, 0x3F	; 63
     e22:	9b 07       	cpc	r25, r27
     e24:	49 f1       	breq	.+82     	; 0xe78 <pow+0x6e>
     e26:	68 94       	set
     e28:	90 38       	cpi	r25, 0x80	; 128
     e2a:	81 05       	cpc	r24, r1
     e2c:	61 f0       	breq	.+24     	; 0xe46 <pow+0x3c>
     e2e:	80 38       	cpi	r24, 0x80	; 128
     e30:	bf ef       	ldi	r27, 0xFF	; 255
     e32:	9b 07       	cpc	r25, r27
     e34:	41 f0       	breq	.+16     	; 0xe46 <pow+0x3c>
     e36:	99 23       	and	r25, r25
     e38:	42 f5       	brpl	.+80     	; 0xe8a <pow+0x80>
     e3a:	ff 3f       	cpi	r31, 0xFF	; 255
     e3c:	e1 05       	cpc	r30, r1
     e3e:	31 05       	cpc	r19, r1
     e40:	21 05       	cpc	r18, r1
     e42:	11 f1       	breq	.+68     	; 0xe88 <pow+0x7e>
     e44:	e8 94       	clt
     e46:	08 94       	sec
     e48:	e7 95       	ror	r30
     e4a:	d9 01       	movw	r26, r18
     e4c:	aa 23       	and	r26, r26
     e4e:	29 f4       	brne	.+10     	; 0xe5a <pow+0x50>
     e50:	ab 2f       	mov	r26, r27
     e52:	be 2f       	mov	r27, r30
     e54:	f8 5f       	subi	r31, 0xF8	; 248
     e56:	d0 f3       	brcs	.-12     	; 0xe4c <pow+0x42>
     e58:	10 c0       	rjmp	.+32     	; 0xe7a <pow+0x70>
     e5a:	ff 5f       	subi	r31, 0xFF	; 255
     e5c:	70 f4       	brcc	.+28     	; 0xe7a <pow+0x70>
     e5e:	a6 95       	lsr	r26
     e60:	e0 f7       	brcc	.-8      	; 0xe5a <pow+0x50>
     e62:	f7 39       	cpi	r31, 0x97	; 151
     e64:	50 f0       	brcs	.+20     	; 0xe7a <pow+0x70>
     e66:	19 f0       	breq	.+6      	; 0xe6e <pow+0x64>
     e68:	ff 3a       	cpi	r31, 0xAF	; 175
     e6a:	38 f4       	brcc	.+14     	; 0xe7a <pow+0x70>
     e6c:	9f 77       	andi	r25, 0x7F	; 127
     e6e:	9f 93       	push	r25
     e70:	0c d0       	rcall	.+24     	; 0xe8a <pow+0x80>
     e72:	0f 90       	pop	r0
     e74:	07 fc       	sbrc	r0, 7
     e76:	90 58       	subi	r25, 0x80	; 128
     e78:	08 95       	ret
     e7a:	3e f0       	brts	.+14     	; 0xe8a <pow+0x80>
     e7c:	14 cf       	rjmp	.-472    	; 0xca6 <__fp_nan>
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e8       	ldi	r24, 0x80	; 128
     e84:	9f e3       	ldi	r25, 0x3F	; 63
     e86:	08 95       	ret
     e88:	4f e7       	ldi	r20, 0x7F	; 127
     e8a:	9f 77       	andi	r25, 0x7F	; 127
     e8c:	5f 93       	push	r21
     e8e:	4f 93       	push	r20
     e90:	3f 93       	push	r19
     e92:	2f 93       	push	r18
     e94:	9e d0       	rcall	.+316    	; 0xfd2 <log>
     e96:	2f 91       	pop	r18
     e98:	3f 91       	pop	r19
     e9a:	4f 91       	pop	r20
     e9c:	5f 91       	pop	r21
     e9e:	52 df       	rcall	.-348    	; 0xd44 <__mulsf3>
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <exp>
     ea2:	19 f4       	brne	.+6      	; 0xeaa <pow+0xa0>
     ea4:	0e f0       	brts	.+2      	; 0xea8 <pow+0x9e>
     ea6:	f9 ce       	rjmp	.-526    	; 0xc9a <__fp_inf>
     ea8:	42 cf       	rjmp	.-380    	; 0xd2e <__fp_zero>
     eaa:	fd ce       	rjmp	.-518    	; 0xca6 <__fp_nan>

00000eac <exp>:
     eac:	26 df       	rcall	.-436    	; 0xcfa <__fp_splitA>
     eae:	c8 f3       	brcs	.-14     	; 0xea2 <pow+0x98>
     eb0:	96 38       	cpi	r25, 0x86	; 134
     eb2:	c0 f7       	brcc	.-16     	; 0xea4 <pow+0x9a>
     eb4:	07 f8       	bld	r0, 7
     eb6:	0f 92       	push	r0
     eb8:	e8 94       	clt
     eba:	2b e3       	ldi	r18, 0x3B	; 59
     ebc:	3a ea       	ldi	r19, 0xAA	; 170
     ebe:	48 eb       	ldi	r20, 0xB8	; 184
     ec0:	5f e7       	ldi	r21, 0x7F	; 127
     ec2:	4e df       	rcall	.-356    	; 0xd60 <__mulsf3_pse>
     ec4:	0f 92       	push	r0
     ec6:	0f 92       	push	r0
     ec8:	0f 92       	push	r0
     eca:	4d b7       	in	r20, 0x3d	; 61
     ecc:	5e b7       	in	r21, 0x3e	; 62
     ece:	0f 92       	push	r0
     ed0:	c0 d0       	rcall	.+384    	; 0x1052 <modf>
     ed2:	e6 e2       	ldi	r30, 0x26	; 38
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	16 d0       	rcall	.+44     	; 0xf04 <__fp_powser>
     ed8:	4f 91       	pop	r20
     eda:	5f 91       	pop	r21
     edc:	ef 91       	pop	r30
     ede:	ff 91       	pop	r31
     ee0:	e5 95       	asr	r30
     ee2:	ee 1f       	adc	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	49 f0       	breq	.+18     	; 0xefa <exp+0x4e>
     ee8:	fe 57       	subi	r31, 0x7E	; 126
     eea:	e0 68       	ori	r30, 0x80	; 128
     eec:	44 27       	eor	r20, r20
     eee:	ee 0f       	add	r30, r30
     ef0:	44 1f       	adc	r20, r20
     ef2:	fa 95       	dec	r31
     ef4:	e1 f7       	brne	.-8      	; 0xeee <exp+0x42>
     ef6:	41 95       	neg	r20
     ef8:	55 0b       	sbc	r21, r21
     efa:	32 d0       	rcall	.+100    	; 0xf60 <ldexp>
     efc:	0f 90       	pop	r0
     efe:	07 fe       	sbrs	r0, 7
     f00:	26 c0       	rjmp	.+76     	; 0xf4e <inverse>
     f02:	08 95       	ret

00000f04 <__fp_powser>:
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	1f 93       	push	r17
     f0a:	0f 93       	push	r16
     f0c:	ff 92       	push	r15
     f0e:	ef 92       	push	r14
     f10:	df 92       	push	r13
     f12:	7b 01       	movw	r14, r22
     f14:	8c 01       	movw	r16, r24
     f16:	68 94       	set
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <__fp_powser+0x20>
     f1a:	da 2e       	mov	r13, r26
     f1c:	ef 01       	movw	r28, r30
     f1e:	1e df       	rcall	.-452    	; 0xd5c <__mulsf3x>
     f20:	fe 01       	movw	r30, r28
     f22:	e8 94       	clt
     f24:	a5 91       	lpm	r26, Z+
     f26:	25 91       	lpm	r18, Z+
     f28:	35 91       	lpm	r19, Z+
     f2a:	45 91       	lpm	r20, Z+
     f2c:	55 91       	lpm	r21, Z+
     f2e:	ae f3       	brts	.-22     	; 0xf1a <__fp_powser+0x16>
     f30:	ef 01       	movw	r28, r30
     f32:	ca dd       	rcall	.-1132   	; 0xac8 <__addsf3x>
     f34:	fe 01       	movw	r30, r28
     f36:	97 01       	movw	r18, r14
     f38:	a8 01       	movw	r20, r16
     f3a:	da 94       	dec	r13
     f3c:	79 f7       	brne	.-34     	; 0xf1c <__fp_powser+0x18>
     f3e:	df 90       	pop	r13
     f40:	ef 90       	pop	r14
     f42:	ff 90       	pop	r15
     f44:	0f 91       	pop	r16
     f46:	1f 91       	pop	r17
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <inverse>:
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	9f e3       	ldi	r25, 0x3F	; 63
     f5a:	ae c0       	rjmp	.+348    	; 0x10b8 <__divsf3>
     f5c:	9e ce       	rjmp	.-708    	; 0xc9a <__fp_inf>
     f5e:	14 c1       	rjmp	.+552    	; 0x1188 <__fp_mpack>

00000f60 <ldexp>:
     f60:	cc de       	rcall	.-616    	; 0xcfa <__fp_splitA>
     f62:	e8 f3       	brcs	.-6      	; 0xf5e <inverse+0x10>
     f64:	99 23       	and	r25, r25
     f66:	d9 f3       	breq	.-10     	; 0xf5e <inverse+0x10>
     f68:	94 0f       	add	r25, r20
     f6a:	51 1d       	adc	r21, r1
     f6c:	bb f3       	brvs	.-18     	; 0xf5c <inverse+0xe>
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	50 40       	sbci	r21, 0x00	; 0
     f72:	94 f0       	brlt	.+36     	; 0xf98 <ldexp+0x38>
     f74:	59 f0       	breq	.+22     	; 0xf8c <ldexp+0x2c>
     f76:	88 23       	and	r24, r24
     f78:	32 f0       	brmi	.+12     	; 0xf86 <ldexp+0x26>
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	c1 f7       	brne	.-16     	; 0xf76 <ldexp+0x16>
     f86:	9e 3f       	cpi	r25, 0xFE	; 254
     f88:	51 05       	cpc	r21, r1
     f8a:	44 f7       	brge	.-48     	; 0xf5c <inverse+0xe>
     f8c:	88 0f       	add	r24, r24
     f8e:	91 1d       	adc	r25, r1
     f90:	96 95       	lsr	r25
     f92:	87 95       	ror	r24
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret
     f98:	5f 3f       	cpi	r21, 0xFF	; 255
     f9a:	ac f0       	brlt	.+42     	; 0xfc6 <ldexp+0x66>
     f9c:	98 3e       	cpi	r25, 0xE8	; 232
     f9e:	9c f0       	brlt	.+38     	; 0xfc6 <ldexp+0x66>
     fa0:	bb 27       	eor	r27, r27
     fa2:	86 95       	lsr	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	08 f4       	brcc	.+2      	; 0xfae <ldexp+0x4e>
     fac:	b1 60       	ori	r27, 0x01	; 1
     fae:	93 95       	inc	r25
     fb0:	c1 f7       	brne	.-16     	; 0xfa2 <ldexp+0x42>
     fb2:	bb 0f       	add	r27, r27
     fb4:	58 f7       	brcc	.-42     	; 0xf8c <ldexp+0x2c>
     fb6:	11 f4       	brne	.+4      	; 0xfbc <ldexp+0x5c>
     fb8:	60 ff       	sbrs	r22, 0
     fba:	e8 cf       	rjmp	.-48     	; 0xf8c <ldexp+0x2c>
     fbc:	6f 5f       	subi	r22, 0xFF	; 255
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	8f 4f       	sbci	r24, 0xFF	; 255
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	e3 cf       	rjmp	.-58     	; 0xf8c <ldexp+0x2c>
     fc6:	b4 ce       	rjmp	.-664    	; 0xd30 <__fp_szero>
     fc8:	0e f0       	brts	.+2      	; 0xfcc <ldexp+0x6c>
     fca:	de c0       	rjmp	.+444    	; 0x1188 <__fp_mpack>
     fcc:	6c ce       	rjmp	.-808    	; 0xca6 <__fp_nan>
     fce:	68 94       	set
     fd0:	64 ce       	rjmp	.-824    	; 0xc9a <__fp_inf>

00000fd2 <log>:
     fd2:	93 de       	rcall	.-730    	; 0xcfa <__fp_splitA>
     fd4:	c8 f3       	brcs	.-14     	; 0xfc8 <ldexp+0x68>
     fd6:	99 23       	and	r25, r25
     fd8:	d1 f3       	breq	.-12     	; 0xfce <ldexp+0x6e>
     fda:	c6 f3       	brts	.-16     	; 0xfcc <ldexp+0x6c>
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	1f 93       	push	r17
     fe2:	0f 93       	push	r16
     fe4:	ff 92       	push	r15
     fe6:	c9 2f       	mov	r28, r25
     fe8:	dd 27       	eor	r29, r29
     fea:	88 23       	and	r24, r24
     fec:	2a f0       	brmi	.+10     	; 0xff8 <log+0x26>
     fee:	21 97       	sbiw	r28, 0x01	; 1
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	da f7       	brpl	.-10     	; 0xfee <log+0x1c>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f eb       	ldi	r21, 0xBF	; 191
    1000:	9f e3       	ldi	r25, 0x3F	; 63
    1002:	88 39       	cpi	r24, 0x98	; 152
    1004:	20 f0       	brcs	.+8      	; 0x100e <log+0x3c>
    1006:	80 3e       	cpi	r24, 0xE0	; 224
    1008:	30 f0       	brcs	.+12     	; 0x1016 <log+0x44>
    100a:	21 96       	adiw	r28, 0x01	; 1
    100c:	8f 77       	andi	r24, 0x7F	; 127
    100e:	4b dd       	rcall	.-1386   	; 0xaa6 <__addsf3>
    1010:	ee e4       	ldi	r30, 0x4E	; 78
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	03 c0       	rjmp	.+6      	; 0x101c <log+0x4a>
    1016:	47 dd       	rcall	.-1394   	; 0xaa6 <__addsf3>
    1018:	eb e7       	ldi	r30, 0x7B	; 123
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	73 df       	rcall	.-282    	; 0xf04 <__fp_powser>
    101e:	8b 01       	movw	r16, r22
    1020:	be 01       	movw	r22, r28
    1022:	ec 01       	movw	r28, r24
    1024:	fb 2e       	mov	r15, r27
    1026:	6f 57       	subi	r22, 0x7F	; 127
    1028:	71 09       	sbc	r23, r1
    102a:	75 95       	asr	r23
    102c:	77 1f       	adc	r23, r23
    102e:	88 0b       	sbc	r24, r24
    1030:	99 0b       	sbc	r25, r25
    1032:	d4 dd       	rcall	.-1112   	; 0xbdc <__floatsisf>
    1034:	28 e1       	ldi	r18, 0x18	; 24
    1036:	32 e7       	ldi	r19, 0x72	; 114
    1038:	41 e3       	ldi	r20, 0x31	; 49
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	8f de       	rcall	.-738    	; 0xd5c <__mulsf3x>
    103e:	af 2d       	mov	r26, r15
    1040:	98 01       	movw	r18, r16
    1042:	ae 01       	movw	r20, r28
    1044:	ff 90       	pop	r15
    1046:	0f 91       	pop	r16
    1048:	1f 91       	pop	r17
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	3c dd       	rcall	.-1416   	; 0xac8 <__addsf3x>
    1050:	3b ce       	rjmp	.-906    	; 0xcc8 <__fp_round>

00001052 <modf>:
    1052:	fa 01       	movw	r30, r20
    1054:	dc 01       	movw	r26, r24
    1056:	aa 0f       	add	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	bf 57       	subi	r27, 0x7F	; 127
    1060:	28 f4       	brcc	.+10     	; 0x106c <modf+0x1a>
    1062:	22 27       	eor	r18, r18
    1064:	33 27       	eor	r19, r19
    1066:	44 27       	eor	r20, r20
    1068:	50 78       	andi	r21, 0x80	; 128
    106a:	1f c0       	rjmp	.+62     	; 0x10aa <modf+0x58>
    106c:	b7 51       	subi	r27, 0x17	; 23
    106e:	88 f4       	brcc	.+34     	; 0x1092 <modf+0x40>
    1070:	ab 2f       	mov	r26, r27
    1072:	00 24       	eor	r0, r0
    1074:	46 95       	lsr	r20
    1076:	37 95       	ror	r19
    1078:	27 95       	ror	r18
    107a:	01 1c       	adc	r0, r1
    107c:	a3 95       	inc	r26
    107e:	d2 f3       	brmi	.-12     	; 0x1074 <modf+0x22>
    1080:	00 20       	and	r0, r0
    1082:	69 f0       	breq	.+26     	; 0x109e <modf+0x4c>
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	44 1f       	adc	r20, r20
    108a:	b3 95       	inc	r27
    108c:	da f3       	brmi	.-10     	; 0x1084 <modf+0x32>
    108e:	0d d0       	rcall	.+26     	; 0x10aa <modf+0x58>
    1090:	09 cd       	rjmp	.-1518   	; 0xaa4 <__subsf3>
    1092:	61 30       	cpi	r22, 0x01	; 1
    1094:	71 05       	cpc	r23, r1
    1096:	a0 e8       	ldi	r26, 0x80	; 128
    1098:	8a 07       	cpc	r24, r26
    109a:	b9 46       	sbci	r27, 0x69	; 105
    109c:	30 f4       	brcc	.+12     	; 0x10aa <modf+0x58>
    109e:	9b 01       	movw	r18, r22
    10a0:	ac 01       	movw	r20, r24
    10a2:	66 27       	eor	r22, r22
    10a4:	77 27       	eor	r23, r23
    10a6:	88 27       	eor	r24, r24
    10a8:	90 78       	andi	r25, 0x80	; 128
    10aa:	30 96       	adiw	r30, 0x00	; 0
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <modf+0x64>
    10ae:	20 83       	st	Z, r18
    10b0:	31 83       	std	Z+1, r19	; 0x01
    10b2:	42 83       	std	Z+2, r20	; 0x02
    10b4:	53 83       	std	Z+3, r21	; 0x03
    10b6:	08 95       	ret

000010b8 <__divsf3>:
    10b8:	0c d0       	rcall	.+24     	; 0x10d2 <__divsf3x>
    10ba:	06 ce       	rjmp	.-1012   	; 0xcc8 <__fp_round>
    10bc:	fe dd       	rcall	.-1028   	; 0xcba <__fp_pscB>
    10be:	40 f0       	brcs	.+16     	; 0x10d0 <__divsf3+0x18>
    10c0:	f5 dd       	rcall	.-1046   	; 0xcac <__fp_pscA>
    10c2:	30 f0       	brcs	.+12     	; 0x10d0 <__divsf3+0x18>
    10c4:	21 f4       	brne	.+8      	; 0x10ce <__divsf3+0x16>
    10c6:	5f 3f       	cpi	r21, 0xFF	; 255
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <__divsf3+0x18>
    10ca:	e7 cd       	rjmp	.-1074   	; 0xc9a <__fp_inf>
    10cc:	51 11       	cpse	r21, r1
    10ce:	30 ce       	rjmp	.-928    	; 0xd30 <__fp_szero>
    10d0:	ea cd       	rjmp	.-1068   	; 0xca6 <__fp_nan>

000010d2 <__divsf3x>:
    10d2:	0b de       	rcall	.-1002   	; 0xcea <__fp_split3>
    10d4:	98 f3       	brcs	.-26     	; 0x10bc <__divsf3+0x4>

000010d6 <__divsf3_pse>:
    10d6:	99 23       	and	r25, r25
    10d8:	c9 f3       	breq	.-14     	; 0x10cc <__divsf3+0x14>
    10da:	55 23       	and	r21, r21
    10dc:	b1 f3       	breq	.-20     	; 0x10ca <__divsf3+0x12>
    10de:	95 1b       	sub	r25, r21
    10e0:	55 0b       	sbc	r21, r21
    10e2:	bb 27       	eor	r27, r27
    10e4:	aa 27       	eor	r26, r26
    10e6:	62 17       	cp	r22, r18
    10e8:	73 07       	cpc	r23, r19
    10ea:	84 07       	cpc	r24, r20
    10ec:	38 f0       	brcs	.+14     	; 0x10fc <__divsf3_pse+0x26>
    10ee:	9f 5f       	subi	r25, 0xFF	; 255
    10f0:	5f 4f       	sbci	r21, 0xFF	; 255
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	44 1f       	adc	r20, r20
    10f8:	aa 1f       	adc	r26, r26
    10fa:	a9 f3       	breq	.-22     	; 0x10e6 <__divsf3_pse+0x10>
    10fc:	33 d0       	rcall	.+102    	; 0x1164 <__divsf3_pse+0x8e>
    10fe:	0e 2e       	mov	r0, r30
    1100:	3a f0       	brmi	.+14     	; 0x1110 <__divsf3_pse+0x3a>
    1102:	e0 e8       	ldi	r30, 0x80	; 128
    1104:	30 d0       	rcall	.+96     	; 0x1166 <__divsf3_pse+0x90>
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	e6 95       	lsr	r30
    110c:	00 1c       	adc	r0, r0
    110e:	ca f7       	brpl	.-14     	; 0x1102 <__divsf3_pse+0x2c>
    1110:	29 d0       	rcall	.+82     	; 0x1164 <__divsf3_pse+0x8e>
    1112:	fe 2f       	mov	r31, r30
    1114:	27 d0       	rcall	.+78     	; 0x1164 <__divsf3_pse+0x8e>
    1116:	66 0f       	add	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	bb 1f       	adc	r27, r27
    111e:	26 17       	cp	r18, r22
    1120:	37 07       	cpc	r19, r23
    1122:	48 07       	cpc	r20, r24
    1124:	ab 07       	cpc	r26, r27
    1126:	b0 e8       	ldi	r27, 0x80	; 128
    1128:	09 f0       	breq	.+2      	; 0x112c <__divsf3_pse+0x56>
    112a:	bb 0b       	sbc	r27, r27
    112c:	80 2d       	mov	r24, r0
    112e:	bf 01       	movw	r22, r30
    1130:	ff 27       	eor	r31, r31
    1132:	93 58       	subi	r25, 0x83	; 131
    1134:	5f 4f       	sbci	r21, 0xFF	; 255
    1136:	2a f0       	brmi	.+10     	; 0x1142 <__divsf3_pse+0x6c>
    1138:	9e 3f       	cpi	r25, 0xFE	; 254
    113a:	51 05       	cpc	r21, r1
    113c:	68 f0       	brcs	.+26     	; 0x1158 <__divsf3_pse+0x82>
    113e:	ad cd       	rjmp	.-1190   	; 0xc9a <__fp_inf>
    1140:	f7 cd       	rjmp	.-1042   	; 0xd30 <__fp_szero>
    1142:	5f 3f       	cpi	r21, 0xFF	; 255
    1144:	ec f3       	brlt	.-6      	; 0x1140 <__divsf3_pse+0x6a>
    1146:	98 3e       	cpi	r25, 0xE8	; 232
    1148:	dc f3       	brlt	.-10     	; 0x1140 <__divsf3_pse+0x6a>
    114a:	86 95       	lsr	r24
    114c:	77 95       	ror	r23
    114e:	67 95       	ror	r22
    1150:	b7 95       	ror	r27
    1152:	f7 95       	ror	r31
    1154:	9f 5f       	subi	r25, 0xFF	; 255
    1156:	c9 f7       	brne	.-14     	; 0x114a <__divsf3_pse+0x74>
    1158:	88 0f       	add	r24, r24
    115a:	91 1d       	adc	r25, r1
    115c:	96 95       	lsr	r25
    115e:	87 95       	ror	r24
    1160:	97 f9       	bld	r25, 7
    1162:	08 95       	ret
    1164:	e1 e0       	ldi	r30, 0x01	; 1
    1166:	66 0f       	add	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	bb 1f       	adc	r27, r27
    116e:	62 17       	cp	r22, r18
    1170:	73 07       	cpc	r23, r19
    1172:	84 07       	cpc	r24, r20
    1174:	ba 07       	cpc	r27, r26
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__divsf3_pse+0xaa>
    1178:	62 1b       	sub	r22, r18
    117a:	73 0b       	sbc	r23, r19
    117c:	84 0b       	sbc	r24, r20
    117e:	ba 0b       	sbc	r27, r26
    1180:	ee 1f       	adc	r30, r30
    1182:	88 f7       	brcc	.-30     	; 0x1166 <__divsf3_pse+0x90>
    1184:	e0 95       	com	r30
    1186:	08 95       	ret

00001188 <__fp_mpack>:
    1188:	9f 3f       	cpi	r25, 0xFF	; 255
    118a:	31 f0       	breq	.+12     	; 0x1198 <__fp_mpack_finite+0xc>

0000118c <__fp_mpack_finite>:
    118c:	91 50       	subi	r25, 0x01	; 1
    118e:	20 f4       	brcc	.+8      	; 0x1198 <__fp_mpack_finite+0xc>
    1190:	87 95       	ror	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	88 0f       	add	r24, r24
    119a:	91 1d       	adc	r25, r1
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	97 f9       	bld	r25, 7
    11a2:	08 95       	ret

000011a4 <__divmodhi4>:
    11a4:	97 fb       	bst	r25, 7
    11a6:	07 2e       	mov	r0, r23
    11a8:	16 f4       	brtc	.+4      	; 0x11ae <__divmodhi4+0xa>
    11aa:	00 94       	com	r0
    11ac:	06 d0       	rcall	.+12     	; 0x11ba <__divmodhi4_neg1>
    11ae:	77 fd       	sbrc	r23, 7
    11b0:	08 d0       	rcall	.+16     	; 0x11c2 <__divmodhi4_neg2>
    11b2:	0b d0       	rcall	.+22     	; 0x11ca <__udivmodhi4>
    11b4:	07 fc       	sbrc	r0, 7
    11b6:	05 d0       	rcall	.+10     	; 0x11c2 <__divmodhi4_neg2>
    11b8:	3e f4       	brtc	.+14     	; 0x11c8 <__divmodhi4_exit>

000011ba <__divmodhi4_neg1>:
    11ba:	90 95       	com	r25
    11bc:	81 95       	neg	r24
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	08 95       	ret

000011c2 <__divmodhi4_neg2>:
    11c2:	70 95       	com	r23
    11c4:	61 95       	neg	r22
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255

000011c8 <__divmodhi4_exit>:
    11c8:	08 95       	ret

000011ca <__udivmodhi4>:
    11ca:	aa 1b       	sub	r26, r26
    11cc:	bb 1b       	sub	r27, r27
    11ce:	51 e1       	ldi	r21, 0x11	; 17
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <__udivmodhi4_ep>

000011d2 <__udivmodhi4_loop>:
    11d2:	aa 1f       	adc	r26, r26
    11d4:	bb 1f       	adc	r27, r27
    11d6:	a6 17       	cp	r26, r22
    11d8:	b7 07       	cpc	r27, r23
    11da:	10 f0       	brcs	.+4      	; 0x11e0 <__udivmodhi4_ep>
    11dc:	a6 1b       	sub	r26, r22
    11de:	b7 0b       	sbc	r27, r23

000011e0 <__udivmodhi4_ep>:
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	5a 95       	dec	r21
    11e6:	a9 f7       	brne	.-22     	; 0x11d2 <__udivmodhi4_loop>
    11e8:	80 95       	com	r24
    11ea:	90 95       	com	r25
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	08 95       	ret

000011f2 <dtostrf>:
    11f2:	ef 92       	push	r14
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	e8 01       	movw	r28, r16
    11fe:	47 fd       	sbrc	r20, 7
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <dtostrf+0x14>
    1202:	34 e0       	ldi	r19, 0x04	; 4
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <dtostrf+0x16>
    1206:	34 e1       	ldi	r19, 0x14	; 20
    1208:	04 2e       	mov	r0, r20
    120a:	00 0c       	add	r0, r0
    120c:	55 0b       	sbc	r21, r21
    120e:	57 ff       	sbrs	r21, 7
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <dtostrf+0x26>
    1212:	51 95       	neg	r21
    1214:	41 95       	neg	r20
    1216:	51 09       	sbc	r21, r1
    1218:	e3 2e       	mov	r14, r19
    121a:	02 2f       	mov	r16, r18
    121c:	24 2f       	mov	r18, r20
    121e:	ae 01       	movw	r20, r28
    1220:	07 d0       	rcall	.+14     	; 0x1230 <dtoa_prf>
    1222:	ce 01       	movw	r24, r28
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ef 90       	pop	r14
    122e:	08 95       	ret

00001230 <dtoa_prf>:
    1230:	a9 e0       	ldi	r26, 0x09	; 9
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ed e1       	ldi	r30, 0x1D	; 29
    1236:	f9 e0       	ldi	r31, 0x09	; 9
    1238:	30 c2       	rjmp	.+1120   	; 0x169a <__prologue_saves__+0xc>
    123a:	6a 01       	movw	r12, r20
    123c:	12 2f       	mov	r17, r18
    123e:	b0 2e       	mov	r11, r16
    1240:	2b e3       	ldi	r18, 0x3B	; 59
    1242:	20 17       	cp	r18, r16
    1244:	20 f0       	brcs	.+8      	; 0x124e <dtoa_prf+0x1e>
    1246:	ff 24       	eor	r15, r15
    1248:	f3 94       	inc	r15
    124a:	f0 0e       	add	r15, r16
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <dtoa_prf+0x22>
    124e:	2c e3       	ldi	r18, 0x3C	; 60
    1250:	f2 2e       	mov	r15, r18
    1252:	0f 2d       	mov	r16, r15
    1254:	27 e0       	ldi	r18, 0x07	; 7
    1256:	ae 01       	movw	r20, r28
    1258:	4f 5f       	subi	r20, 0xFF	; 255
    125a:	5f 4f       	sbci	r21, 0xFF	; 255
    125c:	40 d1       	rcall	.+640    	; 0x14de <__ftoa_engine>
    125e:	bc 01       	movw	r22, r24
    1260:	49 81       	ldd	r20, Y+1	; 0x01
    1262:	84 2f       	mov	r24, r20
    1264:	89 70       	andi	r24, 0x09	; 9
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	31 f0       	breq	.+12     	; 0x1276 <dtoa_prf+0x46>
    126a:	e1 fc       	sbrc	r14, 1
    126c:	06 c0       	rjmp	.+12     	; 0x127a <dtoa_prf+0x4a>
    126e:	e0 fe       	sbrs	r14, 0
    1270:	06 c0       	rjmp	.+12     	; 0x127e <dtoa_prf+0x4e>
    1272:	90 e2       	ldi	r25, 0x20	; 32
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <dtoa_prf+0x50>
    1276:	9d e2       	ldi	r25, 0x2D	; 45
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <dtoa_prf+0x50>
    127a:	9b e2       	ldi	r25, 0x2B	; 43
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <dtoa_prf+0x50>
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	5e 2d       	mov	r21, r14
    1282:	50 71       	andi	r21, 0x10	; 16
    1284:	43 ff       	sbrs	r20, 3
    1286:	3c c0       	rjmp	.+120    	; 0x1300 <dtoa_prf+0xd0>
    1288:	91 11       	cpse	r25, r1
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <dtoa_prf+0x60>
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <dtoa_prf+0x62>
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	81 17       	cp	r24, r17
    1294:	18 f4       	brcc	.+6      	; 0x129c <dtoa_prf+0x6c>
    1296:	21 2f       	mov	r18, r17
    1298:	28 1b       	sub	r18, r24
    129a:	01 c0       	rjmp	.+2      	; 0x129e <dtoa_prf+0x6e>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	51 11       	cpse	r21, r1
    12a0:	0b c0       	rjmp	.+22     	; 0x12b8 <dtoa_prf+0x88>
    12a2:	f6 01       	movw	r30, r12
    12a4:	82 2f       	mov	r24, r18
    12a6:	30 e2       	ldi	r19, 0x20	; 32
    12a8:	88 23       	and	r24, r24
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <dtoa_prf+0x82>
    12ac:	31 93       	st	Z+, r19
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	fb cf       	rjmp	.-10     	; 0x12a8 <dtoa_prf+0x78>
    12b2:	c2 0e       	add	r12, r18
    12b4:	d1 1c       	adc	r13, r1
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	99 23       	and	r25, r25
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <dtoa_prf+0x96>
    12bc:	d6 01       	movw	r26, r12
    12be:	9c 93       	st	X, r25
    12c0:	f6 01       	movw	r30, r12
    12c2:	31 96       	adiw	r30, 0x01	; 1
    12c4:	6f 01       	movw	r12, r30
    12c6:	c6 01       	movw	r24, r12
    12c8:	03 96       	adiw	r24, 0x03	; 3
    12ca:	e2 fe       	sbrs	r14, 2
    12cc:	0a c0       	rjmp	.+20     	; 0x12e2 <dtoa_prf+0xb2>
    12ce:	3e e4       	ldi	r19, 0x4E	; 78
    12d0:	d6 01       	movw	r26, r12
    12d2:	3c 93       	st	X, r19
    12d4:	41 e4       	ldi	r20, 0x41	; 65
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	4c 93       	st	X, r20
    12da:	11 97       	sbiw	r26, 0x01	; 1
    12dc:	12 96       	adiw	r26, 0x02	; 2
    12de:	3c 93       	st	X, r19
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <dtoa_prf+0xbe>
    12e2:	3e e6       	ldi	r19, 0x6E	; 110
    12e4:	f6 01       	movw	r30, r12
    12e6:	30 83       	st	Z, r19
    12e8:	41 e6       	ldi	r20, 0x61	; 97
    12ea:	41 83       	std	Z+1, r20	; 0x01
    12ec:	32 83       	std	Z+2, r19	; 0x02
    12ee:	fc 01       	movw	r30, r24
    12f0:	32 2f       	mov	r19, r18
    12f2:	40 e2       	ldi	r20, 0x20	; 32
    12f4:	33 23       	and	r19, r19
    12f6:	09 f4       	brne	.+2      	; 0x12fa <dtoa_prf+0xca>
    12f8:	42 c0       	rjmp	.+132    	; 0x137e <dtoa_prf+0x14e>
    12fa:	41 93       	st	Z+, r20
    12fc:	31 50       	subi	r19, 0x01	; 1
    12fe:	fa cf       	rjmp	.-12     	; 0x12f4 <dtoa_prf+0xc4>
    1300:	42 ff       	sbrs	r20, 2
    1302:	44 c0       	rjmp	.+136    	; 0x138c <dtoa_prf+0x15c>
    1304:	91 11       	cpse	r25, r1
    1306:	02 c0       	rjmp	.+4      	; 0x130c <dtoa_prf+0xdc>
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	01 c0       	rjmp	.+2      	; 0x130e <dtoa_prf+0xde>
    130c:	84 e0       	ldi	r24, 0x04	; 4
    130e:	81 17       	cp	r24, r17
    1310:	18 f4       	brcc	.+6      	; 0x1318 <dtoa_prf+0xe8>
    1312:	21 2f       	mov	r18, r17
    1314:	28 1b       	sub	r18, r24
    1316:	01 c0       	rjmp	.+2      	; 0x131a <dtoa_prf+0xea>
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	51 11       	cpse	r21, r1
    131c:	0b c0       	rjmp	.+22     	; 0x1334 <dtoa_prf+0x104>
    131e:	f6 01       	movw	r30, r12
    1320:	82 2f       	mov	r24, r18
    1322:	30 e2       	ldi	r19, 0x20	; 32
    1324:	88 23       	and	r24, r24
    1326:	19 f0       	breq	.+6      	; 0x132e <dtoa_prf+0xfe>
    1328:	31 93       	st	Z+, r19
    132a:	81 50       	subi	r24, 0x01	; 1
    132c:	fb cf       	rjmp	.-10     	; 0x1324 <dtoa_prf+0xf4>
    132e:	c2 0e       	add	r12, r18
    1330:	d1 1c       	adc	r13, r1
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	99 23       	and	r25, r25
    1336:	29 f0       	breq	.+10     	; 0x1342 <dtoa_prf+0x112>
    1338:	d6 01       	movw	r26, r12
    133a:	9c 93       	st	X, r25
    133c:	f6 01       	movw	r30, r12
    133e:	31 96       	adiw	r30, 0x01	; 1
    1340:	6f 01       	movw	r12, r30
    1342:	c6 01       	movw	r24, r12
    1344:	03 96       	adiw	r24, 0x03	; 3
    1346:	e2 fe       	sbrs	r14, 2
    1348:	0b c0       	rjmp	.+22     	; 0x1360 <dtoa_prf+0x130>
    134a:	39 e4       	ldi	r19, 0x49	; 73
    134c:	d6 01       	movw	r26, r12
    134e:	3c 93       	st	X, r19
    1350:	3e e4       	ldi	r19, 0x4E	; 78
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	3c 93       	st	X, r19
    1356:	11 97       	sbiw	r26, 0x01	; 1
    1358:	36 e4       	ldi	r19, 0x46	; 70
    135a:	12 96       	adiw	r26, 0x02	; 2
    135c:	3c 93       	st	X, r19
    135e:	07 c0       	rjmp	.+14     	; 0x136e <dtoa_prf+0x13e>
    1360:	39 e6       	ldi	r19, 0x69	; 105
    1362:	f6 01       	movw	r30, r12
    1364:	30 83       	st	Z, r19
    1366:	3e e6       	ldi	r19, 0x6E	; 110
    1368:	31 83       	std	Z+1, r19	; 0x01
    136a:	36 e6       	ldi	r19, 0x66	; 102
    136c:	32 83       	std	Z+2, r19	; 0x02
    136e:	fc 01       	movw	r30, r24
    1370:	32 2f       	mov	r19, r18
    1372:	40 e2       	ldi	r20, 0x20	; 32
    1374:	33 23       	and	r19, r19
    1376:	19 f0       	breq	.+6      	; 0x137e <dtoa_prf+0x14e>
    1378:	41 93       	st	Z+, r20
    137a:	31 50       	subi	r19, 0x01	; 1
    137c:	fb cf       	rjmp	.-10     	; 0x1374 <dtoa_prf+0x144>
    137e:	fc 01       	movw	r30, r24
    1380:	e2 0f       	add	r30, r18
    1382:	f1 1d       	adc	r31, r1
    1384:	10 82       	st	Z, r1
    1386:	8e ef       	ldi	r24, 0xFE	; 254
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	a6 c0       	rjmp	.+332    	; 0x14d8 <dtoa_prf+0x2a8>
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	91 11       	cpse	r25, r1
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <dtoa_prf+0x168>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	16 16       	cp	r1, r22
    139a:	17 06       	cpc	r1, r23
    139c:	1c f4       	brge	.+6      	; 0x13a4 <dtoa_prf+0x174>
    139e:	fb 01       	movw	r30, r22
    13a0:	31 96       	adiw	r30, 0x01	; 1
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <dtoa_prf+0x178>
    13a4:	e1 e0       	ldi	r30, 0x01	; 1
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	2e 0f       	add	r18, r30
    13aa:	3f 1f       	adc	r19, r31
    13ac:	bb 20       	and	r11, r11
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <dtoa_prf+0x188>
    13b0:	eb 2d       	mov	r30, r11
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	31 96       	adiw	r30, 0x01	; 1
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <dtoa_prf+0x18c>
    13b8:	e0 e0       	ldi	r30, 0x00	; 0
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	2e 0f       	add	r18, r30
    13be:	3f 1f       	adc	r19, r31
    13c0:	e1 2f       	mov	r30, r17
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	2e 17       	cp	r18, r30
    13c6:	3f 07       	cpc	r19, r31
    13c8:	1c f4       	brge	.+6      	; 0x13d0 <dtoa_prf+0x1a0>
    13ca:	12 1b       	sub	r17, r18
    13cc:	21 2f       	mov	r18, r17
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <dtoa_prf+0x1a2>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	8e 2d       	mov	r24, r14
    13d4:	88 71       	andi	r24, 0x18	; 24
    13d6:	59 f4       	brne	.+22     	; 0x13ee <dtoa_prf+0x1be>
    13d8:	f6 01       	movw	r30, r12
    13da:	82 2f       	mov	r24, r18
    13dc:	30 e2       	ldi	r19, 0x20	; 32
    13de:	88 23       	and	r24, r24
    13e0:	19 f0       	breq	.+6      	; 0x13e8 <dtoa_prf+0x1b8>
    13e2:	31 93       	st	Z+, r19
    13e4:	81 50       	subi	r24, 0x01	; 1
    13e6:	fb cf       	rjmp	.-10     	; 0x13de <dtoa_prf+0x1ae>
    13e8:	c2 0e       	add	r12, r18
    13ea:	d1 1c       	adc	r13, r1
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	99 23       	and	r25, r25
    13f0:	29 f0       	breq	.+10     	; 0x13fc <dtoa_prf+0x1cc>
    13f2:	d6 01       	movw	r26, r12
    13f4:	9c 93       	st	X, r25
    13f6:	f6 01       	movw	r30, r12
    13f8:	31 96       	adiw	r30, 0x01	; 1
    13fa:	6f 01       	movw	r12, r30
    13fc:	51 11       	cpse	r21, r1
    13fe:	0b c0       	rjmp	.+22     	; 0x1416 <dtoa_prf+0x1e6>
    1400:	f6 01       	movw	r30, r12
    1402:	82 2f       	mov	r24, r18
    1404:	90 e3       	ldi	r25, 0x30	; 48
    1406:	88 23       	and	r24, r24
    1408:	19 f0       	breq	.+6      	; 0x1410 <dtoa_prf+0x1e0>
    140a:	91 93       	st	Z+, r25
    140c:	81 50       	subi	r24, 0x01	; 1
    140e:	fb cf       	rjmp	.-10     	; 0x1406 <dtoa_prf+0x1d6>
    1410:	c2 0e       	add	r12, r18
    1412:	d1 1c       	adc	r13, r1
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	0f 2d       	mov	r16, r15
    1418:	06 0f       	add	r16, r22
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	34 2f       	mov	r19, r20
    141e:	30 71       	andi	r19, 0x10	; 16
    1420:	44 ff       	sbrs	r20, 4
    1422:	03 c0       	rjmp	.+6      	; 0x142a <dtoa_prf+0x1fa>
    1424:	91 33       	cpi	r25, 0x31	; 49
    1426:	09 f4       	brne	.+2      	; 0x142a <dtoa_prf+0x1fa>
    1428:	01 50       	subi	r16, 0x01	; 1
    142a:	10 16       	cp	r1, r16
    142c:	24 f4       	brge	.+8      	; 0x1436 <dtoa_prf+0x206>
    142e:	09 30       	cpi	r16, 0x09	; 9
    1430:	18 f0       	brcs	.+6      	; 0x1438 <dtoa_prf+0x208>
    1432:	08 e0       	ldi	r16, 0x08	; 8
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <dtoa_prf+0x208>
    1436:	01 e0       	ldi	r16, 0x01	; 1
    1438:	ab 01       	movw	r20, r22
    143a:	77 ff       	sbrs	r23, 7
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <dtoa_prf+0x212>
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	fb 01       	movw	r30, r22
    1444:	e4 1b       	sub	r30, r20
    1446:	f5 0b       	sbc	r31, r21
    1448:	a1 e0       	ldi	r26, 0x01	; 1
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ac 0f       	add	r26, r28
    144e:	bd 1f       	adc	r27, r29
    1450:	ea 0f       	add	r30, r26
    1452:	fb 1f       	adc	r31, r27
    1454:	8e e2       	ldi	r24, 0x2E	; 46
    1456:	a8 2e       	mov	r10, r24
    1458:	4b 01       	movw	r8, r22
    145a:	80 1a       	sub	r8, r16
    145c:	91 08       	sbc	r9, r1
    145e:	0b 2d       	mov	r16, r11
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	11 95       	neg	r17
    1464:	01 95       	neg	r16
    1466:	11 09       	sbc	r17, r1
    1468:	4f 3f       	cpi	r20, 0xFF	; 255
    146a:	bf ef       	ldi	r27, 0xFF	; 255
    146c:	5b 07       	cpc	r21, r27
    146e:	21 f4       	brne	.+8      	; 0x1478 <dtoa_prf+0x248>
    1470:	d6 01       	movw	r26, r12
    1472:	ac 92       	st	X, r10
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	6d 01       	movw	r12, r26
    1478:	64 17       	cp	r22, r20
    147a:	75 07       	cpc	r23, r21
    147c:	2c f0       	brlt	.+10     	; 0x1488 <dtoa_prf+0x258>
    147e:	84 16       	cp	r8, r20
    1480:	95 06       	cpc	r9, r21
    1482:	14 f4       	brge	.+4      	; 0x1488 <dtoa_prf+0x258>
    1484:	81 81       	ldd	r24, Z+1	; 0x01
    1486:	01 c0       	rjmp	.+2      	; 0x148a <dtoa_prf+0x25a>
    1488:	80 e3       	ldi	r24, 0x30	; 48
    148a:	41 50       	subi	r20, 0x01	; 1
    148c:	51 09       	sbc	r21, r1
    148e:	31 96       	adiw	r30, 0x01	; 1
    1490:	d6 01       	movw	r26, r12
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	7d 01       	movw	r14, r26
    1496:	40 17       	cp	r20, r16
    1498:	51 07       	cpc	r21, r17
    149a:	24 f0       	brlt	.+8      	; 0x14a4 <dtoa_prf+0x274>
    149c:	d6 01       	movw	r26, r12
    149e:	8c 93       	st	X, r24
    14a0:	67 01       	movw	r12, r14
    14a2:	e2 cf       	rjmp	.-60     	; 0x1468 <dtoa_prf+0x238>
    14a4:	64 17       	cp	r22, r20
    14a6:	75 07       	cpc	r23, r21
    14a8:	39 f4       	brne	.+14     	; 0x14b8 <dtoa_prf+0x288>
    14aa:	96 33       	cpi	r25, 0x36	; 54
    14ac:	20 f4       	brcc	.+8      	; 0x14b6 <dtoa_prf+0x286>
    14ae:	95 33       	cpi	r25, 0x35	; 53
    14b0:	19 f4       	brne	.+6      	; 0x14b8 <dtoa_prf+0x288>
    14b2:	31 11       	cpse	r19, r1
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <dtoa_prf+0x288>
    14b6:	81 e3       	ldi	r24, 0x31	; 49
    14b8:	f6 01       	movw	r30, r12
    14ba:	80 83       	st	Z, r24
    14bc:	f7 01       	movw	r30, r14
    14be:	82 2f       	mov	r24, r18
    14c0:	90 e2       	ldi	r25, 0x20	; 32
    14c2:	88 23       	and	r24, r24
    14c4:	19 f0       	breq	.+6      	; 0x14cc <dtoa_prf+0x29c>
    14c6:	91 93       	st	Z+, r25
    14c8:	81 50       	subi	r24, 0x01	; 1
    14ca:	fb cf       	rjmp	.-10     	; 0x14c2 <dtoa_prf+0x292>
    14cc:	f7 01       	movw	r30, r14
    14ce:	e2 0f       	add	r30, r18
    14d0:	f1 1d       	adc	r31, r1
    14d2:	10 82       	st	Z, r1
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	29 96       	adiw	r28, 0x09	; 9
    14da:	ec e0       	ldi	r30, 0x0C	; 12
    14dc:	fa c0       	rjmp	.+500    	; 0x16d2 <__epilogue_restores__+0xc>

000014de <__ftoa_engine>:
    14de:	28 30       	cpi	r18, 0x08	; 8
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <__ftoa_engine+0x6>
    14e2:	27 e0       	ldi	r18, 0x07	; 7
    14e4:	33 27       	eor	r19, r19
    14e6:	da 01       	movw	r26, r20
    14e8:	99 0f       	add	r25, r25
    14ea:	31 1d       	adc	r19, r1
    14ec:	87 fd       	sbrc	r24, 7
    14ee:	91 60       	ori	r25, 0x01	; 1
    14f0:	00 96       	adiw	r24, 0x00	; 0
    14f2:	61 05       	cpc	r22, r1
    14f4:	71 05       	cpc	r23, r1
    14f6:	39 f4       	brne	.+14     	; 0x1506 <__ftoa_engine+0x28>
    14f8:	32 60       	ori	r19, 0x02	; 2
    14fa:	2e 5f       	subi	r18, 0xFE	; 254
    14fc:	3d 93       	st	X+, r19
    14fe:	30 e3       	ldi	r19, 0x30	; 48
    1500:	2a 95       	dec	r18
    1502:	e1 f7       	brne	.-8      	; 0x14fc <__ftoa_engine+0x1e>
    1504:	08 95       	ret
    1506:	9f 3f       	cpi	r25, 0xFF	; 255
    1508:	30 f0       	brcs	.+12     	; 0x1516 <__ftoa_engine+0x38>
    150a:	80 38       	cpi	r24, 0x80	; 128
    150c:	71 05       	cpc	r23, r1
    150e:	61 05       	cpc	r22, r1
    1510:	09 f0       	breq	.+2      	; 0x1514 <__ftoa_engine+0x36>
    1512:	3c 5f       	subi	r19, 0xFC	; 252
    1514:	3c 5f       	subi	r19, 0xFC	; 252
    1516:	3d 93       	st	X+, r19
    1518:	91 30       	cpi	r25, 0x01	; 1
    151a:	08 f0       	brcs	.+2      	; 0x151e <__ftoa_engine+0x40>
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	91 1d       	adc	r25, r1
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	1f 93       	push	r17
    1526:	0f 93       	push	r16
    1528:	ff 92       	push	r15
    152a:	ef 92       	push	r14
    152c:	19 2f       	mov	r17, r25
    152e:	98 7f       	andi	r25, 0xF8	; 248
    1530:	96 95       	lsr	r25
    1532:	e9 2f       	mov	r30, r25
    1534:	96 95       	lsr	r25
    1536:	96 95       	lsr	r25
    1538:	e9 0f       	add	r30, r25
    153a:	ff 27       	eor	r31, r31
    153c:	ee 5f       	subi	r30, 0xFE	; 254
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	99 27       	eor	r25, r25
    1542:	33 27       	eor	r19, r19
    1544:	ee 24       	eor	r14, r14
    1546:	ff 24       	eor	r15, r15
    1548:	a7 01       	movw	r20, r14
    154a:	e7 01       	movw	r28, r14
    154c:	05 90       	lpm	r0, Z+
    154e:	08 94       	sec
    1550:	07 94       	ror	r0
    1552:	28 f4       	brcc	.+10     	; 0x155e <__ftoa_engine+0x80>
    1554:	36 0f       	add	r19, r22
    1556:	e7 1e       	adc	r14, r23
    1558:	f8 1e       	adc	r15, r24
    155a:	49 1f       	adc	r20, r25
    155c:	51 1d       	adc	r21, r1
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	06 94       	lsr	r0
    1568:	a1 f7       	brne	.-24     	; 0x1552 <__ftoa_engine+0x74>
    156a:	05 90       	lpm	r0, Z+
    156c:	07 94       	ror	r0
    156e:	28 f4       	brcc	.+10     	; 0x157a <__ftoa_engine+0x9c>
    1570:	e7 0e       	add	r14, r23
    1572:	f8 1e       	adc	r15, r24
    1574:	49 1f       	adc	r20, r25
    1576:	56 1f       	adc	r21, r22
    1578:	c1 1d       	adc	r28, r1
    157a:	77 0f       	add	r23, r23
    157c:	88 1f       	adc	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	66 1f       	adc	r22, r22
    1582:	06 94       	lsr	r0
    1584:	a1 f7       	brne	.-24     	; 0x156e <__ftoa_engine+0x90>
    1586:	05 90       	lpm	r0, Z+
    1588:	07 94       	ror	r0
    158a:	28 f4       	brcc	.+10     	; 0x1596 <__ftoa_engine+0xb8>
    158c:	f8 0e       	add	r15, r24
    158e:	49 1f       	adc	r20, r25
    1590:	56 1f       	adc	r21, r22
    1592:	c7 1f       	adc	r28, r23
    1594:	d1 1d       	adc	r29, r1
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	66 1f       	adc	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	06 94       	lsr	r0
    15a0:	a1 f7       	brne	.-24     	; 0x158a <__ftoa_engine+0xac>
    15a2:	05 90       	lpm	r0, Z+
    15a4:	07 94       	ror	r0
    15a6:	20 f4       	brcc	.+8      	; 0x15b0 <__ftoa_engine+0xd2>
    15a8:	49 0f       	add	r20, r25
    15aa:	56 1f       	adc	r21, r22
    15ac:	c7 1f       	adc	r28, r23
    15ae:	d8 1f       	adc	r29, r24
    15b0:	99 0f       	add	r25, r25
    15b2:	66 1f       	adc	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	88 1f       	adc	r24, r24
    15b8:	06 94       	lsr	r0
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__ftoa_engine+0xc8>
    15bc:	84 91       	lpm	r24, Z
    15be:	10 95       	com	r17
    15c0:	17 70       	andi	r17, 0x07	; 7
    15c2:	41 f0       	breq	.+16     	; 0x15d4 <__ftoa_engine+0xf6>
    15c4:	d6 95       	lsr	r29
    15c6:	c7 95       	ror	r28
    15c8:	57 95       	ror	r21
    15ca:	47 95       	ror	r20
    15cc:	f7 94       	ror	r15
    15ce:	e7 94       	ror	r14
    15d0:	1a 95       	dec	r17
    15d2:	c1 f7       	brne	.-16     	; 0x15c4 <__ftoa_engine+0xe6>
    15d4:	e8 ea       	ldi	r30, 0xA8	; 168
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	68 94       	set
    15da:	15 90       	lpm	r1, Z+
    15dc:	15 91       	lpm	r17, Z+
    15de:	35 91       	lpm	r19, Z+
    15e0:	65 91       	lpm	r22, Z+
    15e2:	95 91       	lpm	r25, Z+
    15e4:	05 90       	lpm	r0, Z+
    15e6:	7f e2       	ldi	r23, 0x2F	; 47
    15e8:	73 95       	inc	r23
    15ea:	e1 18       	sub	r14, r1
    15ec:	f1 0a       	sbc	r15, r17
    15ee:	43 0b       	sbc	r20, r19
    15f0:	56 0b       	sbc	r21, r22
    15f2:	c9 0b       	sbc	r28, r25
    15f4:	d0 09       	sbc	r29, r0
    15f6:	c0 f7       	brcc	.-16     	; 0x15e8 <__ftoa_engine+0x10a>
    15f8:	e1 0c       	add	r14, r1
    15fa:	f1 1e       	adc	r15, r17
    15fc:	43 1f       	adc	r20, r19
    15fe:	56 1f       	adc	r21, r22
    1600:	c9 1f       	adc	r28, r25
    1602:	d0 1d       	adc	r29, r0
    1604:	7e f4       	brtc	.+30     	; 0x1624 <__ftoa_engine+0x146>
    1606:	70 33       	cpi	r23, 0x30	; 48
    1608:	11 f4       	brne	.+4      	; 0x160e <__ftoa_engine+0x130>
    160a:	8a 95       	dec	r24
    160c:	e6 cf       	rjmp	.-52     	; 0x15da <__ftoa_engine+0xfc>
    160e:	e8 94       	clt
    1610:	01 50       	subi	r16, 0x01	; 1
    1612:	30 f0       	brcs	.+12     	; 0x1620 <__ftoa_engine+0x142>
    1614:	08 0f       	add	r16, r24
    1616:	0a f4       	brpl	.+2      	; 0x161a <__ftoa_engine+0x13c>
    1618:	00 27       	eor	r16, r16
    161a:	02 17       	cp	r16, r18
    161c:	08 f4       	brcc	.+2      	; 0x1620 <__ftoa_engine+0x142>
    161e:	20 2f       	mov	r18, r16
    1620:	23 95       	inc	r18
    1622:	02 2f       	mov	r16, r18
    1624:	7a 33       	cpi	r23, 0x3A	; 58
    1626:	28 f0       	brcs	.+10     	; 0x1632 <__ftoa_engine+0x154>
    1628:	79 e3       	ldi	r23, 0x39	; 57
    162a:	7d 93       	st	X+, r23
    162c:	2a 95       	dec	r18
    162e:	e9 f7       	brne	.-6      	; 0x162a <__ftoa_engine+0x14c>
    1630:	10 c0       	rjmp	.+32     	; 0x1652 <__ftoa_engine+0x174>
    1632:	7d 93       	st	X+, r23
    1634:	2a 95       	dec	r18
    1636:	89 f6       	brne	.-94     	; 0x15da <__ftoa_engine+0xfc>
    1638:	06 94       	lsr	r0
    163a:	97 95       	ror	r25
    163c:	67 95       	ror	r22
    163e:	37 95       	ror	r19
    1640:	17 95       	ror	r17
    1642:	17 94       	ror	r1
    1644:	e1 18       	sub	r14, r1
    1646:	f1 0a       	sbc	r15, r17
    1648:	43 0b       	sbc	r20, r19
    164a:	56 0b       	sbc	r21, r22
    164c:	c9 0b       	sbc	r28, r25
    164e:	d0 09       	sbc	r29, r0
    1650:	98 f0       	brcs	.+38     	; 0x1678 <__ftoa_engine+0x19a>
    1652:	23 95       	inc	r18
    1654:	7e 91       	ld	r23, -X
    1656:	73 95       	inc	r23
    1658:	7a 33       	cpi	r23, 0x3A	; 58
    165a:	08 f0       	brcs	.+2      	; 0x165e <__ftoa_engine+0x180>
    165c:	70 e3       	ldi	r23, 0x30	; 48
    165e:	7c 93       	st	X, r23
    1660:	20 13       	cpse	r18, r16
    1662:	b8 f7       	brcc	.-18     	; 0x1652 <__ftoa_engine+0x174>
    1664:	7e 91       	ld	r23, -X
    1666:	70 61       	ori	r23, 0x10	; 16
    1668:	7d 93       	st	X+, r23
    166a:	30 f0       	brcs	.+12     	; 0x1678 <__ftoa_engine+0x19a>
    166c:	83 95       	inc	r24
    166e:	71 e3       	ldi	r23, 0x31	; 49
    1670:	7d 93       	st	X+, r23
    1672:	70 e3       	ldi	r23, 0x30	; 48
    1674:	2a 95       	dec	r18
    1676:	e1 f7       	brne	.-8      	; 0x1670 <__ftoa_engine+0x192>
    1678:	11 24       	eor	r1, r1
    167a:	ef 90       	pop	r14
    167c:	ff 90       	pop	r15
    167e:	0f 91       	pop	r16
    1680:	1f 91       	pop	r17
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	99 27       	eor	r25, r25
    1688:	87 fd       	sbrc	r24, 7
    168a:	90 95       	com	r25
    168c:	08 95       	ret

0000168e <__prologue_saves__>:
    168e:	2f 92       	push	r2
    1690:	3f 92       	push	r3
    1692:	4f 92       	push	r4
    1694:	5f 92       	push	r5
    1696:	6f 92       	push	r6
    1698:	7f 92       	push	r7
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	bf 92       	push	r11
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	ca 1b       	sub	r28, r26
    16b8:	db 0b       	sbc	r29, r27
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	09 94       	ijmp

000016c6 <__epilogue_restores__>:
    16c6:	2a 88       	ldd	r2, Y+18	; 0x12
    16c8:	39 88       	ldd	r3, Y+17	; 0x11
    16ca:	48 88       	ldd	r4, Y+16	; 0x10
    16cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    16ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    16d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    16d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    16d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    16d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    16d8:	b9 84       	ldd	r11, Y+9	; 0x09
    16da:	c8 84       	ldd	r12, Y+8	; 0x08
    16dc:	df 80       	ldd	r13, Y+7	; 0x07
    16de:	ee 80       	ldd	r14, Y+6	; 0x06
    16e0:	fd 80       	ldd	r15, Y+5	; 0x05
    16e2:	0c 81       	ldd	r16, Y+4	; 0x04
    16e4:	1b 81       	ldd	r17, Y+3	; 0x03
    16e6:	aa 81       	ldd	r26, Y+2	; 0x02
    16e8:	b9 81       	ldd	r27, Y+1	; 0x01
    16ea:	ce 0f       	add	r28, r30
    16ec:	d1 1d       	adc	r29, r1
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	ed 01       	movw	r28, r26
    16fa:	08 95       	ret

000016fc <_exit>:
    16fc:	f8 94       	cli

000016fe <__stop_program>:
    16fe:	ff cf       	rjmp	.-2      	; 0x16fe <__stop_program>
